{"ast":null,"code":"import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\nvar DONUT_SECTOR_ANIM_DELAY = 50;\nvar DonutChart = function (PieChart) {\n  function DonutChart() {\n    PieChart.apply(this, arguments);\n  }\n  if (PieChart) DonutChart.__proto__ = PieChart;\n  DonutChart.prototype = Object.create(PieChart && PieChart.prototype);\n  DonutChart.prototype.constructor = DonutChart;\n  DonutChart.prototype.addValue = function addValue(value, sector, fields) {\n    var segmentOptions = deepExtend({}, fields.series, {\n      index: fields.index\n    });\n    this.evalSegmentOptions(segmentOptions, value, fields);\n    this.createLegendItem(value, segmentOptions, fields);\n    if (fields.visible === false) {\n      return;\n    }\n    var segment = new DonutSegment(value, sector, segmentOptions);\n    Object.assign(segment, fields);\n    this.append(segment);\n    this.points.push(segment);\n  };\n  DonutChart.prototype.reflow = function reflow(targetBox) {\n    var this$1 = this;\n    var options = this.options;\n    var box = targetBox.clone();\n    var space = 5;\n    var minWidth = Math.min(box.width(), box.height());\n    var halfMinWidth = minWidth / 2;\n    var defaultPadding = minWidth - minWidth * 0.85;\n    var series = options.series;\n    var seriesCount = series.length;\n    var padding = valueOrDefault(options.padding, defaultPadding);\n    padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n    var totalSize = halfMinWidth - padding;\n    var seriesWithoutSize = 0;\n    var holeSize;\n    for (var i = 0; i < seriesCount; i++) {\n      var currentSeries = series[i];\n      if (i === 0) {\n        if (defined(currentSeries.holeSize)) {\n          holeSize = currentSeries.holeSize;\n          totalSize -= currentSeries.holeSize;\n        }\n      }\n      if (defined(currentSeries.size)) {\n        totalSize -= currentSeries.size;\n      } else {\n        seriesWithoutSize++;\n      }\n      if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n        totalSize -= currentSeries.margin;\n      }\n    }\n    if (!defined(holeSize)) {\n      var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n      holeSize = currentSize * 0.75;\n      totalSize -= holeSize;\n    }\n    var innerRadius = holeSize;\n    var margin = 0;\n    var size, radius;\n    this.seriesConfigs = [];\n    for (var i$1 = 0; i$1 < seriesCount; i$1++) {\n      var currentSeries$1 = series[i$1];\n      size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);\n      innerRadius += margin;\n      radius = innerRadius + size;\n      this$1.seriesConfigs.push({\n        innerRadius: innerRadius,\n        radius: radius\n      });\n      margin = currentSeries$1.margin || 0;\n      innerRadius = radius;\n    }\n    PieChart.prototype.reflow.call(this, targetBox);\n  };\n  DonutChart.prototype.animationDelay = function animationDelay(categoryIndex, seriesIndex, seriesCount) {\n    return categoryIndex * DONUT_SECTOR_ANIM_DELAY + INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1);\n  };\n  return DonutChart;\n}(PieChart);\nsetDefaultOptions(DonutChart, {\n  startAngle: 90,\n  connectors: {\n    width: 2,\n    color: \"#939393\",\n    padding: 8\n  }\n});\nexport default DonutChart;","map":{"version":3,"names":["PieChart","DonutSegment","INITIAL_ANIMATION_DURATION","deepExtend","defined","setDefaultOptions","valueOrDefault","DONUT_SECTOR_ANIM_DELAY","DonutChart","apply","arguments","__proto__","prototype","Object","create","constructor","addValue","value","sector","fields","segmentOptions","series","index","evalSegmentOptions","createLegendItem","visible","segment","assign","append","points","push","reflow","targetBox","this$1","options","box","clone","space","minWidth","Math","min","width","height","halfMinWidth","defaultPadding","seriesCount","length","padding","totalSize","seriesWithoutSize","holeSize","i","currentSeries","size","margin","currentSize","innerRadius","radius","seriesConfigs","i$1","currentSeries$1","call","animationDelay","categoryIndex","seriesIndex","startAngle","connectors","color"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/chart/donut-chart/donut-chart.js"],"sourcesContent":["import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\n\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\n\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\n\nvar DONUT_SECTOR_ANIM_DELAY = 50;\n\nvar DonutChart = (function (PieChart) {\n    function DonutChart () {\n        PieChart.apply(this, arguments);\n    }\n\n    if ( PieChart ) DonutChart.__proto__ = PieChart;\n    DonutChart.prototype = Object.create( PieChart && PieChart.prototype );\n    DonutChart.prototype.constructor = DonutChart;\n\n    DonutChart.prototype.addValue = function addValue (value, sector, fields) {\n        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });\n        this.evalSegmentOptions(segmentOptions, value, fields);\n\n        this.createLegendItem(value, segmentOptions, fields);\n\n        if (fields.visible === false) {\n            return;\n        }\n\n        var segment = new DonutSegment(value, sector, segmentOptions);\n\n        Object.assign(segment, fields);\n        this.append(segment);\n        this.points.push(segment);\n    };\n\n    DonutChart.prototype.reflow = function reflow (targetBox) {\n        var this$1 = this;\n\n        var options = this.options;\n        var box = targetBox.clone();\n        var space = 5;\n        var minWidth = Math.min(box.width(), box.height());\n        var halfMinWidth = minWidth / 2;\n        var defaultPadding = minWidth - minWidth * 0.85;\n        var series = options.series;\n        var seriesCount = series.length;\n\n        var padding = valueOrDefault(options.padding, defaultPadding);\n        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n\n        var totalSize = halfMinWidth - padding;\n        var seriesWithoutSize = 0;\n        var holeSize;\n\n        for (var i = 0; i < seriesCount; i++) {\n            var currentSeries = series[i];\n            if (i === 0) {\n                if (defined(currentSeries.holeSize)) {\n                    holeSize = currentSeries.holeSize;\n                    totalSize -= currentSeries.holeSize;\n                }\n            }\n\n            if (defined(currentSeries.size)) {\n                totalSize -= currentSeries.size;\n            } else {\n                seriesWithoutSize++;\n            }\n\n            if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n                totalSize -= currentSeries.margin;\n            }\n        }\n\n        if (!defined(holeSize)) {\n            var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n            holeSize = currentSize * 0.75;\n            totalSize -= holeSize;\n        }\n\n        var innerRadius = holeSize;\n        var margin = 0;\n        var size, radius;\n\n        this.seriesConfigs = [];\n\n        for (var i$1 = 0; i$1 < seriesCount; i$1++) {\n            var currentSeries$1 = series[i$1];\n            size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);\n            innerRadius += margin;\n            radius = innerRadius + size;\n            this$1.seriesConfigs.push({ innerRadius: innerRadius, radius: radius });\n            margin = currentSeries$1.margin || 0;\n            innerRadius = radius;\n        }\n\n        PieChart.prototype.reflow.call(this, targetBox);\n    };\n\n    DonutChart.prototype.animationDelay = function animationDelay (categoryIndex, seriesIndex, seriesCount) {\n        return categoryIndex * DONUT_SECTOR_ANIM_DELAY +\n            (INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1));\n    };\n\n    return DonutChart;\n}(PieChart));\n\n\nsetDefaultOptions(DonutChart, {\n    startAngle: 90,\n    connectors: {\n        width: 2,\n        color: \"#939393\",\n        padding: 8\n    }\n});\n\nexport default DonutChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}