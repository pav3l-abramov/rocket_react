{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport var NumericQRDataMode = function (QRDataMode) {\n  function NumericQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n  if (QRDataMode) NumericQRDataMode.__proto__ = QRDataMode;\n  NumericQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  NumericQRDataMode.prototype.constructor = NumericQRDataMode;\n  NumericQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      bitsInCharacterCount: [10, 12, 14],\n      modeIndicator: \"0001\"\n    });\n  };\n  NumericQRDataMode.prototype.getValue = function getValue(character) {\n    return parseInt(character, 10);\n  };\n  NumericQRDataMode.prototype.encode = function encode(str, version) {\n    var mode = this,\n      parts = splitInto(str, 3),\n      result = mode.getModeCountString(str.length, version);\n    var i;\n    for (i = 0; i < parts.length - 1; i++) {\n      result += toBitsString(parts[i], 10);\n    }\n    return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n  };\n  NumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    var mod3 = inputLength % 3;\n    return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n  };\n  return NumericQRDataMode;\n}(QRDataMode);","map":{"version":3,"names":["QRDataMode","extend","toBitsString","splitInto","NumericQRDataMode","apply","arguments","__proto__","prototype","Object","create","constructor","initProperties","call","bitsInCharacterCount","modeIndicator","getValue","character","parseInt","encode","str","version","mode","parts","result","getModeCountString","length","i","getStringBitsLength","inputLength","mod3","getBitsCharacterCount","Math","floor"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/data-modes/numeric-data-mode.js"],"sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString,\n    splitInto\n} from '../../utils';\n\nexport var NumericQRDataMode = (function (QRDataMode) {\n    function NumericQRDataMode () {\n        QRDataMode.apply(this, arguments);\n    }\n\n    if ( QRDataMode ) NumericQRDataMode.__proto__ = QRDataMode;\n    NumericQRDataMode.prototype = Object.create( QRDataMode && QRDataMode.prototype );\n    NumericQRDataMode.prototype.constructor = NumericQRDataMode;\n\n    NumericQRDataMode.prototype.initProperties = function initProperties () {\n        QRDataMode.prototype.initProperties.call(this);\n\n        extend(this, {\n            bitsInCharacterCount: [10, 12, 14],\n            modeIndicator: \"0001\"\n        });\n    };\n\n    NumericQRDataMode.prototype.getValue = function getValue (character) {\n        return parseInt(character, 10);\n    };\n\n    NumericQRDataMode.prototype.encode = function encode (str, version) {\n        var mode = this,\n            parts = splitInto(str, 3),\n            result = mode.getModeCountString(str.length, version);\n        var i;\n\n        for (i = 0; i < parts.length - 1; i++) {\n            result += toBitsString(parts[i], 10);\n        }\n\n        return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n    };\n\n    NumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength (inputLength, version) {\n        var mod3 = inputLength % 3;\n        return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n    };\n\n    return NumericQRDataMode;\n}(QRDataMode));\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,aAAa;AACpC,SACIC,YAAY,EACZC,SAAS,QACN,aAAa;AAEpB,OAAO,IAAIC,iBAAiB,GAAI,UAAUJ,UAAU,EAAE;EAClD,SAASI,iBAAiB,GAAI;IAC1BJ,UAAU,CAACK,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EACrC;EAEA,IAAKN,UAAU,EAAGI,iBAAiB,CAACG,SAAS,GAAGP,UAAU;EAC1DI,iBAAiB,CAACI,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAEV,UAAU,IAAIA,UAAU,CAACQ,SAAS,CAAE;EACjFJ,iBAAiB,CAACI,SAAS,CAACG,WAAW,GAAGP,iBAAiB;EAE3DA,iBAAiB,CAACI,SAAS,CAACI,cAAc,GAAG,SAASA,cAAc,GAAI;IACpEZ,UAAU,CAACQ,SAAS,CAACI,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;IAE9CZ,MAAM,CAAC,IAAI,EAAE;MACTa,oBAAoB,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAClCC,aAAa,EAAE;IACnB,CAAC,CAAC;EACN,CAAC;EAEDX,iBAAiB,CAACI,SAAS,CAACQ,QAAQ,GAAG,SAASA,QAAQ,CAAEC,SAAS,EAAE;IACjE,OAAOC,QAAQ,CAACD,SAAS,EAAE,EAAE,CAAC;EAClC,CAAC;EAEDb,iBAAiB,CAACI,SAAS,CAACW,MAAM,GAAG,SAASA,MAAM,CAAEC,GAAG,EAAEC,OAAO,EAAE;IAChE,IAAIC,IAAI,GAAG,IAAI;MACXC,KAAK,GAAGpB,SAAS,CAACiB,GAAG,EAAE,CAAC,CAAC;MACzBI,MAAM,GAAGF,IAAI,CAACG,kBAAkB,CAACL,GAAG,CAACM,MAAM,EAAEL,OAAO,CAAC;IACzD,IAAIM,CAAC;IAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACG,MAAM,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;MACnCH,MAAM,IAAItB,YAAY,CAACqB,KAAK,CAACI,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC;IAEA,OAAOH,MAAM,GAAGtB,YAAY,CAACqB,KAAK,CAACI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGJ,KAAK,CAACI,CAAC,CAAC,CAACD,MAAM,CAAC;EACnE,CAAC;EAEDtB,iBAAiB,CAACI,SAAS,CAACoB,mBAAmB,GAAG,SAASA,mBAAmB,CAAEC,WAAW,EAAER,OAAO,EAAE;IAClG,IAAIS,IAAI,GAAGD,WAAW,GAAG,CAAC;IAC1B,OAAO,CAAC,GAAG,IAAI,CAACE,qBAAqB,CAACV,OAAO,CAAC,GAAG,EAAE,GAAGW,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,GAAGC,IAAI,IAAIA,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvH,CAAC;EAED,OAAO1B,iBAAiB;AAC5B,CAAC,CAACJ,UAAU,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}