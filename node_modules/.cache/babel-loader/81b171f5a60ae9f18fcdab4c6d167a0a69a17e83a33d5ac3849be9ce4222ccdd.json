{"ast":null,"code":"import { Encodings } from './encodings/main';\nvar validate = function (encoding, size, prefix) {\n  return function (value) {\n    try {\n      encoding.encode(prefix + value, size.width, size.height);\n    } catch (error) {\n      return {\n        valid: false,\n        error: error\n      };\n    }\n    return {\n      valid: true\n    };\n  };\n};\n\n// A default size for encodings, so the validator can check only the value if no size is provided.\nvar fallbackSize = {\n  width: 500,\n  height: 100\n};\nfunction barcodeValidator(type, size) {\n  if (size === void 0) size = fallbackSize;\n  if (!type) {\n    throw new Error(\"Please specify barcode type to validate.\");\n  }\n  var resolvedType = type.toLowerCase();\n  var prefix = '';\n  if (resolvedType === 'upca') {\n    resolvedType = 'ean13';\n    prefix = '0';\n  } else if (resolvedType === 'upce') {\n    resolvedType = 'ean8';\n    prefix = '0';\n  }\n  if (!Encodings[resolvedType]) {\n    throw new Error(\"Encoding '\" + type + \"' is not supported.\");\n  }\n  var encoding = new Encodings[resolvedType]();\n  return validate(encoding, size, prefix);\n}\nexport default barcodeValidator;","map":{"version":3,"names":["Encodings","validate","encoding","size","prefix","value","encode","width","height","error","valid","fallbackSize","barcodeValidator","type","Error","resolvedType","toLowerCase"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/barcode/barcode-validator.js"],"sourcesContent":["import { Encodings } from './encodings/main';\n\nvar validate = function (encoding, size, prefix) { return function (value) {\n    try {\n        encoding.encode(\n            prefix + value,\n            size.width,\n            size.height\n        );\n    } catch (error) {\n        return {\n            valid: false,\n            error: error\n        };\n    }\n\n    return {\n        valid: true\n    };\n}; };\n\n// A default size for encodings, so the validator can check only the value if no size is provided.\nvar fallbackSize = { width: 500, height: 100 };\n\nfunction barcodeValidator(type, size) {\n    if ( size === void 0 ) size = fallbackSize;\n\n    if (!type) {\n        throw new Error(\"Please specify barcode type to validate.\");\n    }\n\n    var resolvedType = type.toLowerCase();\n    var prefix = '';\n    if (resolvedType === 'upca') {\n        resolvedType = 'ean13';\n        prefix = '0';\n    } else if (resolvedType === 'upce') {\n        resolvedType = 'ean8';\n        prefix = '0';\n    }\n\n    if (!Encodings[resolvedType]) {\n        throw new Error((\"Encoding '\" + type + \"' is not supported.\"));\n    }\n\n    var encoding = new Encodings[resolvedType]();\n    return validate(encoding, size, prefix);\n}\n\nexport default barcodeValidator;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAE5C,IAAIC,QAAQ,GAAG,UAAUC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAAE,OAAO,UAAUC,KAAK,EAAE;IACvE,IAAI;MACAH,QAAQ,CAACI,MAAM,CACXF,MAAM,GAAGC,KAAK,EACdF,IAAI,CAACI,KAAK,EACVJ,IAAI,CAACK,MAAM,CACd;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,OAAO;QACHC,KAAK,EAAE,KAAK;QACZD,KAAK,EAAEA;MACX,CAAC;IACL;IAEA,OAAO;MACHC,KAAK,EAAE;IACX,CAAC;EACL,CAAC;AAAE,CAAC;;AAEJ;AACA,IAAIC,YAAY,GAAG;EAAEJ,KAAK,EAAE,GAAG;EAAEC,MAAM,EAAE;AAAI,CAAC;AAE9C,SAASI,gBAAgB,CAACC,IAAI,EAAEV,IAAI,EAAE;EAClC,IAAKA,IAAI,KAAK,KAAK,CAAC,EAAGA,IAAI,GAAGQ,YAAY;EAE1C,IAAI,CAACE,IAAI,EAAE;IACP,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC/D;EAEA,IAAIC,YAAY,GAAGF,IAAI,CAACG,WAAW,EAAE;EACrC,IAAIZ,MAAM,GAAG,EAAE;EACf,IAAIW,YAAY,KAAK,MAAM,EAAE;IACzBA,YAAY,GAAG,OAAO;IACtBX,MAAM,GAAG,GAAG;EAChB,CAAC,MAAM,IAAIW,YAAY,KAAK,MAAM,EAAE;IAChCA,YAAY,GAAG,MAAM;IACrBX,MAAM,GAAG,GAAG;EAChB;EAEA,IAAI,CAACJ,SAAS,CAACe,YAAY,CAAC,EAAE;IAC1B,MAAM,IAAID,KAAK,CAAE,YAAY,GAAGD,IAAI,GAAG,qBAAqB,CAAE;EAClE;EAEA,IAAIX,QAAQ,GAAG,IAAIF,SAAS,CAACe,YAAY,CAAC,EAAE;EAC5C,OAAOd,QAAQ,CAACC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC;AAC3C;AAEA,eAAeQ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}