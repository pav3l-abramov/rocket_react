{"ast":null,"code":"import SeriesBinder from '../series-binder';\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\nvar STD_ERR = \"stderr\";\nvar STD_DEV = \"stddev\";\nvar percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nvar standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\nvar ErrorRangeCalculator = function (Class) {\n  function ErrorRangeCalculator(errorValue, series, field) {\n    Class.call(this);\n    this.initGlobalRanges(errorValue, series, field);\n  }\n  if (Class) ErrorRangeCalculator.__proto__ = Class;\n  ErrorRangeCalculator.prototype = Object.create(Class && Class.prototype);\n  ErrorRangeCalculator.prototype.constructor = ErrorRangeCalculator;\n  ErrorRangeCalculator.prototype.initGlobalRanges = function initGlobalRanges(errorValue, series, field) {\n    var data = series.data;\n    var deviationMatch = standardDeviationRegex.exec(errorValue);\n    if (deviationMatch) {\n      this.valueGetter = this.createValueGetter(series, field);\n      var average = this.getAverage(data);\n      var deviation = this.getStandardDeviation(data, average, false);\n      var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n      var errorRange = {\n        low: average.value - deviation * multiple,\n        high: average.value + deviation * multiple\n      };\n      this.globalRange = function () {\n        return errorRange;\n      };\n    } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n      this.valueGetter = this.createValueGetter(series, field);\n      var standardError = this.getStandardError(data, this.getAverage(data));\n      this.globalRange = function (value) {\n        return {\n          low: value - standardError,\n          high: value + standardError\n        };\n      };\n    }\n  };\n  ErrorRangeCalculator.prototype.createValueGetter = function createValueGetter(series, field) {\n    var data = series.data;\n    var binder = SeriesBinder.current;\n    var valueFields = binder.valueFields(series);\n    var item = defined(data[0]) ? data[0] : {};\n    var valueGetter;\n    if (isArray(item)) {\n      var index = field ? valueFields.indexOf(field) : 0;\n      valueGetter = getter(\"[\" + index + \"]\");\n    } else if (isNumber(item)) {\n      valueGetter = getter();\n    } else if (typeof item === OBJECT) {\n      var srcValueFields = binder.sourceFields(series, valueFields);\n      valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n    }\n    return valueGetter;\n  };\n  ErrorRangeCalculator.prototype.getErrorRange = function getErrorRange(pointValue, errorValue) {\n    var low, high, value;\n    if (!defined(errorValue)) {\n      return null;\n    }\n    if (this.globalRange) {\n      return this.globalRange(pointValue);\n    }\n    if (isArray(errorValue)) {\n      low = pointValue - errorValue[0];\n      high = pointValue + errorValue[1];\n    } else if (isNumber(value = parseFloat(errorValue))) {\n      low = pointValue - value;\n      high = pointValue + value;\n    } else if (value = percentRegex.exec(errorValue)) {\n      var percentValue = pointValue * (parseFloat(value[1]) / 100);\n      low = pointValue - Math.abs(percentValue);\n      high = pointValue + Math.abs(percentValue);\n    } else {\n      throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n    }\n    return {\n      low: low,\n      high: high\n    };\n  };\n  ErrorRangeCalculator.prototype.getStandardError = function getStandardError(data, average) {\n    return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n  };\n  ErrorRangeCalculator.prototype.getStandardDeviation = function getStandardDeviation(data, average, isSample) {\n    var this$1 = this;\n    var length = data.length;\n    var total = isSample ? average.count - 1 : average.count;\n    var squareDifferenceSum = 0;\n    for (var idx = 0; idx < length; idx++) {\n      var value = this$1.valueGetter(data[idx]);\n      if (isNumber(value)) {\n        squareDifferenceSum += Math.pow(value - average.value, 2);\n      }\n    }\n    return Math.sqrt(squareDifferenceSum / total);\n  };\n  ErrorRangeCalculator.prototype.getAverage = function getAverage(data) {\n    var this$1 = this;\n    var length = data.length;\n    var sum = 0;\n    var count = 0;\n    for (var idx = 0; idx < length; idx++) {\n      var value = this$1.valueGetter(data[idx]);\n      if (isNumber(value)) {\n        sum += value;\n        count++;\n      }\n    }\n    return {\n      value: sum / count,\n      count: count\n    };\n  };\n  return ErrorRangeCalculator;\n}(Class);\nexport default ErrorRangeCalculator;","map":{"version":3,"names":["SeriesBinder","OBJECT","Class","defined","getter","isArray","isNumber","STD_ERR","STD_DEV","percentRegex","standardDeviationRegex","RegExp","ErrorRangeCalculator","errorValue","series","field","call","initGlobalRanges","__proto__","prototype","Object","create","constructor","data","deviationMatch","exec","valueGetter","createValueGetter","average","getAverage","deviation","getStandardDeviation","multiple","parseFloat","errorRange","low","value","high","globalRange","indexOf","standardError","getStandardError","binder","current","valueFields","item","index","srcValueFields","sourceFields","getErrorRange","pointValue","percentValue","Math","abs","Error","sqrt","count","isSample","this$1","length","total","squareDifferenceSum","idx","pow","sum"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/chart/error-bars/error-range-calculator.js"],"sourcesContent":["import SeriesBinder from '../series-binder';\n\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\n\nvar STD_ERR = \"stderr\";\nvar STD_DEV = \"stddev\";\nvar percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nvar standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nvar ErrorRangeCalculator = (function (Class) {\n    function ErrorRangeCalculator(errorValue, series, field) {\n        Class.call(this);\n\n        this.initGlobalRanges(errorValue, series, field);\n    }\n\n    if ( Class ) ErrorRangeCalculator.__proto__ = Class;\n    ErrorRangeCalculator.prototype = Object.create( Class && Class.prototype );\n    ErrorRangeCalculator.prototype.constructor = ErrorRangeCalculator;\n\n    ErrorRangeCalculator.prototype.initGlobalRanges = function initGlobalRanges (errorValue, series, field) {\n        var data = series.data;\n        var deviationMatch = standardDeviationRegex.exec(errorValue);\n\n        if (deviationMatch) {\n            this.valueGetter = this.createValueGetter(series, field);\n\n            var average = this.getAverage(data);\n            var deviation = this.getStandardDeviation(data, average, false);\n            var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n            var errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };\n\n            this.globalRange = function() {\n                return errorRange;\n            };\n        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n            this.valueGetter = this.createValueGetter(series, field);\n            var standardError = this.getStandardError(data, this.getAverage(data));\n\n            this.globalRange = function(value) {\n                return { low: value - standardError, high: value + standardError };\n            };\n        }\n    };\n\n    ErrorRangeCalculator.prototype.createValueGetter = function createValueGetter (series, field) {\n        var data = series.data;\n        var binder = SeriesBinder.current;\n        var valueFields = binder.valueFields(series);\n        var item = defined(data[0]) ? data[0] : {};\n        var valueGetter;\n\n        if (isArray(item)) {\n            var index = field ? valueFields.indexOf(field) : 0;\n            valueGetter = getter(\"[\" + index + \"]\");\n        } else if (isNumber(item)) {\n            valueGetter = getter();\n        } else if (typeof item === OBJECT) {\n            var srcValueFields = binder.sourceFields(series, valueFields);\n            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n        }\n\n        return valueGetter;\n    };\n\n    ErrorRangeCalculator.prototype.getErrorRange = function getErrorRange (pointValue, errorValue) {\n        var low, high, value;\n\n        if (!defined(errorValue)) {\n            return null;\n        }\n\n        if (this.globalRange) {\n            return this.globalRange(pointValue);\n        }\n\n        if (isArray(errorValue)) {\n            low = pointValue - errorValue[0];\n            high = pointValue + errorValue[1];\n        } else if (isNumber(value = parseFloat(errorValue))) {\n            low = pointValue - value;\n            high = pointValue + value;\n        } else if ((value = percentRegex.exec(errorValue))) {\n            var percentValue = pointValue * (parseFloat(value[1]) / 100);\n            low = pointValue - Math.abs(percentValue);\n            high = pointValue + Math.abs(percentValue);\n        } else {\n            throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n        }\n\n        return { low: low, high: high };\n    };\n\n    ErrorRangeCalculator.prototype.getStandardError = function getStandardError (data, average) {\n        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n    };\n\n    ErrorRangeCalculator.prototype.getStandardDeviation = function getStandardDeviation (data, average, isSample) {\n        var this$1 = this;\n\n        var length = data.length;\n        var total = isSample ? average.count - 1 : average.count;\n        var squareDifferenceSum = 0;\n\n        for (var idx = 0; idx < length; idx++) {\n            var value = this$1.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                squareDifferenceSum += Math.pow(value - average.value, 2);\n            }\n        }\n\n        return Math.sqrt(squareDifferenceSum / total);\n    };\n\n    ErrorRangeCalculator.prototype.getAverage = function getAverage (data) {\n        var this$1 = this;\n\n        var length = data.length;\n        var sum = 0;\n        var count = 0;\n\n        for (var idx = 0; idx < length; idx++) {\n            var value = this$1.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                sum += value;\n                count++;\n            }\n        }\n\n        return {\n            value: sum / count,\n            count: count\n        };\n    };\n\n    return ErrorRangeCalculator;\n}(Class));\n\nexport default ErrorRangeCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}