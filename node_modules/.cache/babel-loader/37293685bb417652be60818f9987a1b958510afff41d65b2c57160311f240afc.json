{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n// Gets and sets the children. Returns the children or the re-created item with the new children.\nfunction children(item, subItemsField, subItems) {\n  var _a;\n  if (subItems) {\n    return __assign(__assign({}, item), (_a = {}, _a[subItemsField] = subItems.length ? __spreadArray([], subItems, true) : undefined, _a));\n  } else {\n    return item && item[subItemsField] ? __spreadArray([], item[subItemsField], true) : [];\n  }\n}\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n  if (dataItem[subItemsField]) {\n    var subItems = children(dataItem, subItemsField).map(function (child) {\n      return mapItem(child, subItemsField, callbackfn);\n    });\n    return callbackfn(children(dataItem, subItemsField, subItems));\n  }\n  return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTree = function (tree, subItemsField, callback) {\n  return __spreadArray([], tree.map(function (item) {\n    return mapItem(item, subItemsField, callback);\n  }), true);\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n  var curData = tree;\n  var parentNodes = [];\n  for (var i = 0; i < level.length; i++) {\n    curData = curData[level[i]];\n    curData = Array.isArray(curData) ? curData : curData[subItemsField];\n    parentNodes.push(curData);\n  }\n  var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n  var newItemIndex = level[level.length - 1];\n  var newItem = callback(parent[newItemIndex]);\n  parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n  var _a;\n  return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\nexport var getItemPath = function (tree, level, subItemsField) {\n  var nodes = [];\n  var itemLevel = __spreadArray([], level, true);\n  if (itemLevel.length) {\n    var element = tree[itemLevel.shift() || 0];\n    nodes.push(element);\n    while (itemLevel.length && subItemsField) {\n      element = element[subItemsField][itemLevel.shift() || 0];\n      nodes.push(element);\n    }\n  }\n  return nodes;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","pack","l","ar","Array","slice","concat","children","item","subItemsField","subItems","_a","undefined","mapItem","dataItem","callbackfn","map","child","mapTree","tree","callback","mapTreeItem","level","curData","parentNodes","isArray","push","parent","newItemIndex","newItem","splice","extendDataItem","propsToExtend","getItemPath","nodes","itemLevel","element","shift"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-react-common/dist/es/treeDataOperations.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n// Gets and sets the children. Returns the children or the re-created item with the new children.\nfunction children(item, subItemsField, subItems) {\n    var _a;\n    if (subItems) {\n        return __assign(__assign({}, item), (_a = {}, _a[subItemsField] = subItems.length ? __spreadArray([], subItems, true) : undefined, _a));\n    }\n    else {\n        return item && item[subItemsField] ? __spreadArray([], item[subItemsField], true) : [];\n    }\n}\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n    if (dataItem[subItemsField]) {\n        var subItems = children(dataItem, subItemsField).map(function (child) { return mapItem(child, subItemsField, callbackfn); });\n        return callbackfn(children(dataItem, subItemsField, subItems));\n    }\n    return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTree = function (tree, subItemsField, callback) {\n    return __spreadArray([], tree.map(function (item) { return mapItem(item, subItemsField, callback); }), true);\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n    var curData = tree;\n    var parentNodes = [];\n    for (var i = 0; i < level.length; i++) {\n        curData = curData[level[i]];\n        curData = Array.isArray(curData) ? curData : curData[subItemsField];\n        parentNodes.push(curData);\n    }\n    var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n    var newItemIndex = level[level.length - 1];\n    var newItem = callback(parent[newItemIndex]);\n    parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n    var _a;\n    return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\nexport var getItemPath = function (tree, level, subItemsField) {\n    var nodes = [];\n    var itemLevel = __spreadArray([], level, true);\n    if (itemLevel.length) {\n        var element = tree[itemLevel.shift() || 0];\n        nodes.push(element);\n        while (itemLevel.length && subItemsField) {\n            element = element[subItemsField][itemLevel.shift() || 0];\n            nodes.push(element);\n        }\n    }\n    return nodes;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,IAAIO,aAAa,GAAI,IAAI,IAAI,IAAI,CAACA,aAAa,IAAK,UAAUC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC1E,IAAIA,IAAI,IAAIV,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEa,CAAC,GAAGF,IAAI,CAACR,MAAM,EAAEW,EAAE,EAAEd,CAAC,GAAGa,CAAC,EAAEb,CAAC,EAAE,EAAE;IACjF,IAAIc,EAAE,IAAI,EAAEd,CAAC,IAAIW,IAAI,CAAC,EAAE;MACpB,IAAI,CAACG,EAAE,EAAEA,EAAE,GAAGC,KAAK,CAACV,SAAS,CAACW,KAAK,CAACT,IAAI,CAACI,IAAI,EAAE,CAAC,EAAEX,CAAC,CAAC;MACpDc,EAAE,CAACd,CAAC,CAAC,GAAGW,IAAI,CAACX,CAAC,CAAC;IACnB;EACJ;EACA,OAAOU,EAAE,CAACO,MAAM,CAACH,EAAE,IAAIC,KAAK,CAACV,SAAS,CAACW,KAAK,CAACT,IAAI,CAACI,IAAI,CAAC,CAAC;AAC5D,CAAC;AACD;AACA,SAASO,QAAQ,CAACC,IAAI,EAAEC,aAAa,EAAEC,QAAQ,EAAE;EAC7C,IAAIC,EAAE;EACN,IAAID,QAAQ,EAAE;IACV,OAAO1B,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEwB,IAAI,CAAC,GAAGG,EAAE,GAAG,CAAC,CAAC,EAAEA,EAAE,CAACF,aAAa,CAAC,GAAGC,QAAQ,CAAClB,MAAM,GAAGM,aAAa,CAAC,EAAE,EAAEY,QAAQ,EAAE,IAAI,CAAC,GAAGE,SAAS,EAAED,EAAE,EAAE;EAC3I,CAAC,MACI;IACD,OAAOH,IAAI,IAAIA,IAAI,CAACC,aAAa,CAAC,GAAGX,aAAa,CAAC,EAAE,EAAEU,IAAI,CAACC,aAAa,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE;EAC1F;AACJ;AACA,SAASI,OAAO,CAACC,QAAQ,EAAEL,aAAa,EAAEM,UAAU,EAAE;EAClD,IAAID,QAAQ,CAACL,aAAa,CAAC,EAAE;IACzB,IAAIC,QAAQ,GAAGH,QAAQ,CAACO,QAAQ,EAAEL,aAAa,CAAC,CAACO,GAAG,CAAC,UAAUC,KAAK,EAAE;MAAE,OAAOJ,OAAO,CAACI,KAAK,EAAER,aAAa,EAAEM,UAAU,CAAC;IAAE,CAAC,CAAC;IAC5H,OAAOA,UAAU,CAACR,QAAQ,CAACO,QAAQ,EAAEL,aAAa,EAAEC,QAAQ,CAAC,CAAC;EAClE;EACA,OAAOK,UAAU,CAACD,QAAQ,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,OAAO,GAAG,UAAUC,IAAI,EAAEV,aAAa,EAAEW,QAAQ,EAAE;EAC1D,OAAOtB,aAAa,CAAC,EAAE,EAAEqB,IAAI,CAACH,GAAG,CAAC,UAAUR,IAAI,EAAE;IAAE,OAAOK,OAAO,CAACL,IAAI,EAAEC,aAAa,EAAEW,QAAQ,CAAC;EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;AAChH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUF,IAAI,EAAEG,KAAK,EAAEb,aAAa,EAAEW,QAAQ,EAAE;EACrE,IAAIG,OAAO,GAAGJ,IAAI;EAClB,IAAIK,WAAW,GAAG,EAAE;EACpB,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,KAAK,CAAC9B,MAAM,EAAEH,CAAC,EAAE,EAAE;IACnCkC,OAAO,GAAGA,OAAO,CAACD,KAAK,CAACjC,CAAC,CAAC,CAAC;IAC3BkC,OAAO,GAAGnB,KAAK,CAACqB,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAGA,OAAO,CAACd,aAAa,CAAC;IACnEe,WAAW,CAACE,IAAI,CAACH,OAAO,CAAC;EAC7B;EACA,IAAII,MAAM,GAAGH,WAAW,CAAChC,MAAM,GAAG,CAAC,GAAGgC,WAAW,CAACA,WAAW,CAAChC,MAAM,GAAG,CAAC,CAAC,GAAG2B,IAAI;EAChF,IAAIS,YAAY,GAAGN,KAAK,CAACA,KAAK,CAAC9B,MAAM,GAAG,CAAC,CAAC;EAC1C,IAAIqC,OAAO,GAAGT,QAAQ,CAACO,MAAM,CAACC,YAAY,CAAC,CAAC;EAC5CD,MAAM,CAACG,MAAM,CAACF,YAAY,EAAE,CAAC,EAAEC,OAAO,CAAC;AAC3C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,cAAc,GAAG,UAAUvB,IAAI,EAAEC,aAAa,EAAEuB,aAAa,EAAE;EACtE,IAAIrB,EAAE;EACN,OAAO1B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEsB,IAAI,EAAEA,IAAI,CAACC,aAAa,CAAC,IAAIE,EAAE,GAAG,CAAC,CAAC,EAAEA,EAAE,CAACF,aAAa,CAAC,GAAGD,IAAI,CAACC,aAAa,CAAC,CAACJ,KAAK,EAAE,EAAEM,EAAE,IAAI,CAAC,CAAC,EAAEqB,aAAa,IAAI,CAAC,CAAC,CAAC;AAClJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUd,IAAI,EAAEG,KAAK,EAAEb,aAAa,EAAE;EAC3D,IAAIyB,KAAK,GAAG,EAAE;EACd,IAAIC,SAAS,GAAGrC,aAAa,CAAC,EAAE,EAAEwB,KAAK,EAAE,IAAI,CAAC;EAC9C,IAAIa,SAAS,CAAC3C,MAAM,EAAE;IAClB,IAAI4C,OAAO,GAAGjB,IAAI,CAACgB,SAAS,CAACE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1CH,KAAK,CAACR,IAAI,CAACU,OAAO,CAAC;IACnB,OAAOD,SAAS,CAAC3C,MAAM,IAAIiB,aAAa,EAAE;MACtC2B,OAAO,GAAGA,OAAO,CAAC3B,aAAa,CAAC,CAAC0B,SAAS,CAACE,KAAK,EAAE,IAAI,CAAC,CAAC;MACxDH,KAAK,CAACR,IAAI,CAACU,OAAO,CAAC;IACvB;EACJ;EACA,OAAOF,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}