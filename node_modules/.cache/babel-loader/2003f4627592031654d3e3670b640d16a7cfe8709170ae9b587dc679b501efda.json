{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport { ChartElement, TextBox } from '../../core';\nimport PieChartMixin from '../mixins/pie-chart-mixin';\nimport FunnelSegment from './funnel-segment';\nimport { bindSegments, evalOptions } from '../utils';\nimport { CENTER, LEFT } from '../../common/constants';\nimport { autoTextColor, deepExtend, isFunction, getTemplate, limitValue, setDefaultOptions } from '../../common';\nvar FunnelChart = function (ChartElement) {\n  function FunnelChart(plotArea, options) {\n    ChartElement.call(this, options);\n    this.plotArea = plotArea;\n    this.points = [];\n    this.labels = [];\n    this.legendItems = [];\n    this.render();\n  }\n  if (ChartElement) FunnelChart.__proto__ = ChartElement;\n  FunnelChart.prototype = Object.create(ChartElement && ChartElement.prototype);\n  FunnelChart.prototype.constructor = FunnelChart;\n  FunnelChart.prototype.formatPointValue = function formatPointValue(point, format) {\n    return this.chartService.format.auto(format, point.value);\n  };\n  FunnelChart.prototype.render = function render() {\n    var this$1 = this;\n    var ref = this;\n    var options = ref.options;\n    var seriesColors = ref.plotArea.options.seriesColors;\n    if (seriesColors === void 0) seriesColors = [];\n    var series = options.series[0];\n    var data = series.data;\n    if (!data) {\n      return;\n    }\n    var ref$1 = bindSegments(series);\n    var total = ref$1.total;\n    var points = ref$1.points;\n    for (var i = 0; i < points.length; i++) {\n      var pointData = points[i];\n      if (!pointData) {\n        continue;\n      }\n      var fields = pointData.fields;\n      if (!isFunction(series.color)) {\n        series.color = fields.color || seriesColors[i % seriesColors.length];\n      }\n      fields = deepExtend({\n        index: i,\n        owner: this$1,\n        series: series,\n        dataItem: data[i],\n        percentage: pointData.value / total\n      }, fields, {\n        visible: pointData.visible\n      });\n      var value = pointData.valueFields.value;\n      var segment = this$1.createSegment(value, fields);\n      var label = this$1.createLabel(value, fields);\n      if (segment && label) {\n        segment.append(label);\n      }\n    }\n  };\n  FunnelChart.prototype.evalSegmentOptions = function evalSegmentOptions(options, value, fields) {\n    var series = fields.series;\n    evalOptions(options, {\n      value: value,\n      series: series,\n      dataItem: fields.dataItem,\n      index: fields.index\n    }, {\n      defaults: series._defaults,\n      excluded: [\"data\", \"content\", \"template\", \"toggle\", \"visual\"]\n    });\n  };\n  FunnelChart.prototype.createSegment = function createSegment(value, fields) {\n    var seriesOptions = deepExtend({}, fields.series);\n    this.evalSegmentOptions(seriesOptions, value, fields);\n    this.createLegendItem(value, seriesOptions, fields);\n    if (fields.visible !== false) {\n      var segment = new FunnelSegment(value, seriesOptions, fields);\n      Object.assign(segment, fields);\n      this.append(segment);\n      this.points.push(segment);\n      return segment;\n    }\n  };\n  FunnelChart.prototype.createLabel = function createLabel(value, fields) {\n    var series = fields.series;\n    var dataItem = fields.dataItem;\n    var labels = deepExtend({}, this.options.labels, series.labels);\n    var text = value;\n    if (labels.visible) {\n      var labelTemplate = getTemplate(labels);\n      var data = {\n        dataItem: dataItem,\n        value: value,\n        percentage: fields.percentage,\n        category: fields.category,\n        series: series\n      };\n      if (labelTemplate) {\n        text = labelTemplate(data);\n      } else if (labels.format) {\n        text = this.plotArea.chartService.format.auto(labels.format, text);\n      }\n      if (!labels.color) {\n        labels.color = autoTextColor(series.color);\n        if (!labels.background) {\n          labels.background = series.color;\n        }\n      }\n      this.evalSegmentOptions(labels, value, fields);\n      var textBox = new TextBox(text, deepExtend({\n        vAlign: labels.position\n      }, labels), data);\n      this.labels.push(textBox);\n      return textBox;\n    }\n  };\n  FunnelChart.prototype.labelPadding = function labelPadding() {\n    var labels = this.labels;\n    var padding = {\n      left: 0,\n      right: 0\n    };\n    for (var i = 0; i < labels.length; i++) {\n      var label = labels[i];\n      var align = label.options.align;\n      if (align !== CENTER) {\n        var width = labels[i].box.width();\n        if (align === LEFT) {\n          padding.left = Math.max(padding.left, width);\n        } else {\n          padding.right = Math.max(padding.right, width);\n        }\n      }\n    }\n    return padding;\n  };\n  FunnelChart.prototype.dynamicSlopeReflow = function dynamicSlopeReflow(box, width, totalHeight) {\n    var ref = this;\n    var options = ref.options;\n    var segments = ref.points;\n    var count = segments.length;\n    var firstSegment = segments[0];\n    var maxSegment = firstSegment;\n    for (var idx = 0; idx < segments.length; idx++) {\n      if (segments[idx].percentage > maxSegment.percentage) {\n        maxSegment = segments[idx];\n      }\n    }\n    var lastUpperSide = firstSegment.percentage / maxSegment.percentage * width;\n    var previousOffset = (width - lastUpperSide) / 2;\n    var previousHeight = 0;\n    for (var idx$1 = 0; idx$1 < count; idx$1++) {\n      var percentage = segments[idx$1].percentage;\n      var nextSegment = segments[idx$1 + 1];\n      var nextPercentage = nextSegment ? nextSegment.percentage : percentage;\n      var points = segments[idx$1].points = [];\n      var height = options.dynamicHeight ? totalHeight * percentage : totalHeight / count;\n      var offset = void 0;\n      if (!percentage) {\n        offset = nextPercentage ? 0 : width / 2;\n      } else {\n        offset = (width - lastUpperSide * (nextPercentage / percentage)) / 2;\n      }\n      offset = limitValue(offset, 0, width);\n      points.push(new geom.Point(box.x1 + previousOffset, box.y1 + previousHeight));\n      points.push(new geom.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));\n      points.push(new geom.Point(box.x1 + width - offset, box.y1 + height + previousHeight));\n      points.push(new geom.Point(box.x1 + offset, box.y1 + height + previousHeight));\n      previousOffset = offset;\n      previousHeight += height + options.segmentSpacing;\n      lastUpperSide = limitValue(width - 2 * offset, 0, width);\n    }\n  };\n  FunnelChart.prototype.constantSlopeReflow = function constantSlopeReflow(box, width, totalHeight) {\n    var ref = this;\n    var options = ref.options;\n    var segments = ref.points;\n    var count = segments.length;\n    var decreasingWidth = options.neckRatio <= 1;\n    var neckRatio = decreasingWidth ? options.neckRatio * width : width;\n    var previousOffset = decreasingWidth ? 0 : (width - width / options.neckRatio) / 2;\n    var topMostWidth = decreasingWidth ? width : width - previousOffset * 2;\n    var finalNarrow = (topMostWidth - neckRatio) / 2;\n    var previousHeight = 0;\n    for (var idx = 0; idx < count; idx++) {\n      var points = segments[idx].points = [];\n      var percentage = segments[idx].percentage;\n      var offset = options.dynamicHeight ? finalNarrow * percentage : finalNarrow / count;\n      var height = options.dynamicHeight ? totalHeight * percentage : totalHeight / count;\n      points.push(new geom.Point(box.x1 + previousOffset, box.y1 + previousHeight));\n      points.push(new geom.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));\n      points.push(new geom.Point(box.x1 + width - previousOffset - offset, box.y1 + height + previousHeight));\n      points.push(new geom.Point(box.x1 + previousOffset + offset, box.y1 + height + previousHeight));\n      previousOffset += offset;\n      previousHeight += height + options.segmentSpacing;\n    }\n  };\n  FunnelChart.prototype.reflow = function reflow(chartBox) {\n    var points = this.points;\n    var count = points.length;\n    if (!count) {\n      return;\n    }\n    var options = this.options;\n    var box = chartBox.clone().unpad(this.labelPadding());\n    var totalHeight = box.height() - options.segmentSpacing * (count - 1);\n    var width = box.width();\n    if (options.dynamicSlope) {\n      this.dynamicSlopeReflow(box, width, totalHeight);\n    } else {\n      this.constantSlopeReflow(box, width, totalHeight);\n    }\n    for (var idx = 0; idx < count; idx++) {\n      points[idx].reflow(chartBox);\n    }\n  };\n  return FunnelChart;\n}(ChartElement);\nsetDefaultOptions(FunnelChart, {\n  neckRatio: 0.3,\n  width: 300,\n  dynamicSlope: false,\n  dynamicHeight: true,\n  segmentSpacing: 0,\n  labels: {\n    visible: false,\n    align: CENTER,\n    position: CENTER,\n    zIndex: 1\n  }\n});\ndeepExtend(FunnelChart.prototype, PieChartMixin);\nexport default FunnelChart;","map":{"version":3,"names":["geometry","geom","ChartElement","TextBox","PieChartMixin","FunnelSegment","bindSegments","evalOptions","CENTER","LEFT","autoTextColor","deepExtend","isFunction","getTemplate","limitValue","setDefaultOptions","FunnelChart","plotArea","options","call","points","labels","legendItems","render","__proto__","prototype","Object","create","constructor","formatPointValue","point","format","chartService","auto","value","this$1","ref","seriesColors","series","data","ref$1","total","i","length","pointData","fields","color","index","owner","dataItem","percentage","visible","valueFields","segment","createSegment","label","createLabel","append","evalSegmentOptions","defaults","_defaults","excluded","seriesOptions","createLegendItem","assign","push","text","labelTemplate","category","background","textBox","vAlign","position","labelPadding","padding","left","right","align","width","box","Math","max","dynamicSlopeReflow","totalHeight","segments","count","firstSegment","maxSegment","idx","lastUpperSide","previousOffset","previousHeight","idx$1","nextSegment","nextPercentage","height","dynamicHeight","offset","Point","x1","y1","segmentSpacing","constantSlopeReflow","decreasingWidth","neckRatio","topMostWidth","finalNarrow","reflow","chartBox","clone","unpad","dynamicSlope","zIndex"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/chart/funnel-chart/funnel-chart.js"],"sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\n\nimport { ChartElement, TextBox } from '../../core';\nimport PieChartMixin from '../mixins/pie-chart-mixin';\nimport FunnelSegment from './funnel-segment';\n\nimport { bindSegments, evalOptions } from '../utils';\n\nimport { CENTER, LEFT } from '../../common/constants';\nimport { autoTextColor, deepExtend, isFunction, getTemplate, limitValue, setDefaultOptions } from '../../common';\n\nvar FunnelChart = (function (ChartElement) {\n    function FunnelChart(plotArea, options) {\n        ChartElement.call(this, options);\n\n        this.plotArea = plotArea;\n        this.points = [];\n        this.labels = [];\n        this.legendItems = [];\n        this.render();\n    }\n\n    if ( ChartElement ) FunnelChart.__proto__ = ChartElement;\n    FunnelChart.prototype = Object.create( ChartElement && ChartElement.prototype );\n    FunnelChart.prototype.constructor = FunnelChart;\n\n    FunnelChart.prototype.formatPointValue = function formatPointValue (point, format) {\n        return this.chartService.format.auto(format,point.value);\n    };\n\n    FunnelChart.prototype.render = function render () {\n        var this$1 = this;\n\n        var ref = this;\n        var options = ref.options;\n        var seriesColors = ref.plotArea.options.seriesColors; if ( seriesColors === void 0 ) seriesColors = [];\n        var series = options.series[0];\n        var data = series.data;\n\n        if (!data) {\n            return;\n        }\n\n        var ref$1 = bindSegments(series);\n        var total = ref$1.total;\n        var points = ref$1.points;\n\n        for (var i = 0; i < points.length; i++) {\n            var pointData = points[i];\n\n            if (!pointData) {\n                continue;\n            }\n\n            var fields = pointData.fields;\n\n            if (!isFunction(series.color)) {\n                series.color = fields.color || seriesColors[i % seriesColors.length];\n            }\n\n            fields = deepExtend({\n                index: i,\n                owner: this$1,\n                series: series,\n                dataItem: data[i],\n                percentage: pointData.value / total\n            }, fields, { visible: pointData.visible });\n\n            var value = pointData.valueFields.value;\n            var segment = this$1.createSegment(value, fields);\n            var label = this$1.createLabel(value, fields);\n\n            if (segment && label) {\n                segment.append(label);\n            }\n        }\n    };\n\n    FunnelChart.prototype.evalSegmentOptions = function evalSegmentOptions (options, value, fields) {\n        var series = fields.series;\n\n        evalOptions(options, {\n            value: value,\n            series: series,\n            dataItem: fields.dataItem,\n            index: fields.index\n        }, { defaults: series._defaults, excluded: [ \"data\", \"content\", \"template\", \"toggle\", \"visual\" ] });\n    };\n\n    FunnelChart.prototype.createSegment = function createSegment (value, fields) {\n        var seriesOptions = deepExtend({}, fields.series);\n        this.evalSegmentOptions(seriesOptions, value, fields);\n\n        this.createLegendItem(value, seriesOptions, fields);\n\n        if (fields.visible !== false) {\n\n            var segment = new FunnelSegment(value, seriesOptions, fields);\n            Object.assign(segment, fields);\n\n            this.append(segment);\n            this.points.push(segment);\n\n            return segment;\n        }\n    };\n\n    FunnelChart.prototype.createLabel = function createLabel (value, fields) {\n        var series = fields.series;\n        var dataItem = fields.dataItem;\n        var labels = deepExtend({}, this.options.labels, series.labels);\n        var text = value;\n\n        if (labels.visible) {\n            var labelTemplate = getTemplate(labels);\n            var data = {\n                dataItem: dataItem,\n                value: value,\n                percentage: fields.percentage,\n                category: fields.category,\n                series: series\n            };\n            if (labelTemplate) {\n                text = labelTemplate(data);\n            } else if (labels.format) {\n                text = this.plotArea.chartService.format.auto(labels.format, text);\n            }\n\n            if (!labels.color) {\n                labels.color = autoTextColor(series.color);\n                if (!labels.background) {\n                    labels.background = series.color;\n                }\n            }\n\n            this.evalSegmentOptions(labels, value, fields);\n            var textBox = new TextBox(text, deepExtend({\n                vAlign: labels.position\n            }, labels), data);\n\n            this.labels.push(textBox);\n\n            return textBox;\n        }\n    };\n\n    FunnelChart.prototype.labelPadding = function labelPadding () {\n        var labels = this.labels;\n        var padding = { left: 0, right: 0 };\n\n        for (var i = 0; i < labels.length; i++) {\n            var label = labels[i];\n            var align = label.options.align;\n            if (align !== CENTER) {\n                var width = labels[i].box.width();\n\n                if (align === LEFT) {\n                    padding.left = Math.max(padding.left, width);\n                } else {\n                    padding.right = Math.max(padding.right, width);\n                }\n            }\n        }\n\n        return padding;\n    };\n\n    FunnelChart.prototype.dynamicSlopeReflow = function dynamicSlopeReflow (box, width, totalHeight) {\n        var ref = this;\n        var options = ref.options;\n        var segments = ref.points;\n        var count = segments.length;\n        var firstSegment = segments[0];\n        var maxSegment = firstSegment;\n\n        for (var idx = 0; idx < segments.length; idx++) {\n            if (segments[idx].percentage > maxSegment.percentage) {\n                maxSegment = segments[idx];\n            }\n        }\n\n        var lastUpperSide = (firstSegment.percentage / maxSegment.percentage) * width;\n        var previousOffset = (width - lastUpperSide) / 2;\n        var previousHeight = 0;\n\n        for (var idx$1 = 0; idx$1 < count; idx$1++) {\n            var percentage = segments[idx$1].percentage;\n            var nextSegment = segments[idx$1 + 1];\n            var nextPercentage = (nextSegment ? nextSegment.percentage : percentage);\n            var points = segments[idx$1].points = [];\n            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);\n            var offset = (void 0);\n\n            if (!percentage) {\n                offset = nextPercentage ? 0 : width / 2;\n            } else {\n                offset = (width - lastUpperSide * (nextPercentage / percentage)) / 2;\n            }\n\n            offset = limitValue(offset, 0, width);\n\n            points.push(new geom.Point(box.x1 + previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - offset, box.y1 + height + previousHeight));\n            points.push(new geom.Point(box.x1 + offset, box.y1 + height + previousHeight));\n\n            previousOffset = offset;\n            previousHeight += height + options.segmentSpacing;\n            lastUpperSide = limitValue(width - 2 * offset, 0, width);\n        }\n    };\n\n    FunnelChart.prototype.constantSlopeReflow = function constantSlopeReflow (box, width, totalHeight) {\n        var ref = this;\n        var options = ref.options;\n        var segments = ref.points;\n        var count = segments.length;\n        var decreasingWidth = options.neckRatio <= 1;\n        var neckRatio = decreasingWidth ? options.neckRatio * width : width;\n        var previousOffset = decreasingWidth ? 0 : (width - width / options.neckRatio) / 2;\n        var topMostWidth = decreasingWidth ? width : width - previousOffset * 2;\n        var finalNarrow = (topMostWidth - neckRatio) / 2;\n        var previousHeight = 0;\n\n        for (var idx = 0; idx < count; idx++) {\n            var points = segments[idx].points = [];\n            var percentage = segments[idx].percentage;\n            var offset = (options.dynamicHeight) ? (finalNarrow * percentage) : (finalNarrow / count);\n            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);\n\n            points.push(new geom.Point(box.x1 + previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));\n            points.push(new geom.Point(box.x1 + width - previousOffset - offset, box.y1 + height + previousHeight));\n            points.push(new geom.Point(box.x1 + previousOffset + offset,box.y1 + height + previousHeight));\n            previousOffset += offset;\n            previousHeight += height + options.segmentSpacing;\n        }\n    };\n\n    FunnelChart.prototype.reflow = function reflow (chartBox) {\n        var points = this.points;\n        var count = points.length;\n\n        if (!count) {\n            return;\n        }\n\n        var options = this.options;\n        var box = chartBox.clone().unpad(this.labelPadding());\n        var totalHeight = box.height() - options.segmentSpacing * (count - 1);\n        var width = box.width();\n\n        if (options.dynamicSlope) {\n            this.dynamicSlopeReflow(box, width, totalHeight);\n        } else {\n            this.constantSlopeReflow(box, width, totalHeight);\n        }\n\n        for (var idx = 0; idx < count; idx++) {\n            points[idx].reflow(chartBox);\n        }\n    };\n\n    return FunnelChart;\n}(ChartElement));\n\nsetDefaultOptions(FunnelChart, {\n    neckRatio: 0.3,\n    width: 300,\n    dynamicSlope: false,\n    dynamicHeight: true,\n    segmentSpacing: 0,\n    labels: {\n        visible: false,\n        align: CENTER,\n        position: CENTER,\n        zIndex: 1\n    }\n});\n\ndeepExtend(FunnelChart.prototype, PieChartMixin);\n\nexport default FunnelChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}