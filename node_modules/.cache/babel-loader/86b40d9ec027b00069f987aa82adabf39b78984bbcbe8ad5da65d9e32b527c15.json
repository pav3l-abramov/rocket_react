{"ast":null,"code":"import React, { Component } from \"react\";\nexport default class hamster extends Component {\n  constructor(mass, fuel) {\n    super(mass, fuel);\n    this.vel = Math.sqrt(9.8 * 6378100);\n    this.mass = Number(mass);\n    switch (fuel) {\n      case 'chem':\n        this.fuel = 5e3;\n        break;\n      case 'ion':\n        this.fuel = 21e4;\n        break;\n      case 'nucl':\n        this.fuel = 4e5;\n        break;\n      case 'therm':\n        this.fuel = 37.5e6;\n        break;\n      case 'photon':\n        this.fuel = 3e8;\n        break;\n    }\n  }\n  get getfuel() {\n    return this.fuel;\n  }\n  get getMass() {\n    return this.mass;\n  }\n  get getfirst_space() {\n    return Math.sqrt(9.8 * 6378100);\n  }\n  get get_vel_list() {\n    let vel_list = [];\n    const first_vel = Math.sqrt(9.8 * 6378100);\n    let new_mass = this.mass;\n    let hamster_velocity = 0;\n    let fuel_mass = 0;\n    while (hamster_velocity < first_vel) {\n      hamster_velocity = this.fuel * Math.log(new_mass / this.mass);\n      vel_list.push(hamster_velocity);\n      new_mass += 10;\n      fuel_mass += 10;\n    }\n    return vel_list;\n  }\n  get get_fuel_list() {\n    let fuel_list = [];\n    const first_vel = Math.sqrt(9.8 * 6378100);\n    let new_mass = this.mass;\n    let hamster_velocity = 0;\n    let fuel_mass = 0;\n    while (hamster_velocity < first_vel) {\n      hamster_velocity = this.fuel * Math.log(new_mass / this.mass);\n      fuel_list.push(fuel_mass);\n      new_mass += 10;\n      fuel_mass += 10;\n    }\n    return fuel_list;\n  }\n  get get_end_fuel() {\n    return this.mass * (Math.exp(this.vel / this.fuel) - 1);\n  }\n}\nexport { hamster };","map":{"version":3,"names":["React","Component","hamster","constructor","mass","fuel","vel","Math","sqrt","Number","getfuel","getMass","getfirst_space","get_vel_list","vel_list","first_vel","new_mass","hamster_velocity","fuel_mass","log","push","get_fuel_list","fuel_list","get_end_fuel","exp"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/src/hamster.js"],"sourcesContent":["\r\nimport React,{Component} from \"react\";\r\nexport  default class hamster extends  Component{\r\n    constructor(mass, fuel) {\r\n        super(mass, fuel)\r\n        this.vel = Math.sqrt(9.8 * 6378100);\r\n        this.mass = Number(mass);\r\n\r\n        switch (fuel) {\r\n            case 'chem':\r\n                this.fuel=5e3;\r\n                break;\r\n            case 'ion':\r\n                this.fuel=21e4;\r\n                break;\r\n            case 'nucl':\r\n                this.fuel=4e5;\r\n                break;\r\n            case 'therm':\r\n                this.fuel=37.5e6;\r\n                break;\r\n            case 'photon':\r\n                this.fuel=3e8;\r\n                break;\r\n        }\r\n    }\r\n\r\n    get getfuel() {\r\n        return this.fuel;\r\n    }\r\n\r\n    get getMass() {\r\n        return this.mass;\r\n    }\r\n\r\n    get getfirst_space() {\r\n        return Math.sqrt(9.8*6378100);\r\n    }\r\n    get get_vel_list () {\r\n        let vel_list=[];\r\n        const first_vel = Math.sqrt(9.8*6378100);\r\n        let new_mass = this.mass;\r\n        let hamster_velocity = 0;\r\n        let fuel_mass=0;\r\n        while (hamster_velocity < first_vel) {\r\n            hamster_velocity=this.fuel*Math.log(new_mass/this.mass);\r\n            vel_list.push(hamster_velocity);\r\n            new_mass+=10;\r\n            fuel_mass+=10;\r\n            }\r\n            return vel_list;\r\n        }\r\n\r\n    get get_fuel_list () {\r\n            let fuel_list=[];\r\n            const first_vel = Math.sqrt(9.8*6378100);\r\n            let new_mass = this.mass;\r\n            let hamster_velocity = 0;\r\n            let fuel_mass=0;\r\n            while (hamster_velocity < first_vel) {\r\n                hamster_velocity=this.fuel*Math.log(new_mass/this.mass);\r\n                fuel_list.push(fuel_mass);\r\n                new_mass+=10;\r\n                fuel_mass+=10;\r\n                }\r\n                return fuel_list;\r\n            }\r\n\r\n\r\n\r\n    get get_end_fuel () {\r\n        return this.mass*((Math.exp(this.vel/this.fuel))-1);\r\n\r\n    }\r\n    }\r\nexport {hamster}\r\n\r\n\r\n"],"mappings":"AACA,OAAOA,KAAK,IAAEC,SAAS,QAAO,OAAO;AACrC,eAAgB,MAAMC,OAAO,SAAUD,SAAS;EAC5CE,WAAW,CAACC,IAAI,EAAEC,IAAI,EAAE;IACpB,KAAK,CAACD,IAAI,EAAEC,IAAI,CAAC;IACjB,IAAI,CAACC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;IACnC,IAAI,CAACJ,IAAI,GAAGK,MAAM,CAACL,IAAI,CAAC;IAExB,QAAQC,IAAI;MACR,KAAK,MAAM;QACP,IAAI,CAACA,IAAI,GAAC,GAAG;QACb;MACJ,KAAK,KAAK;QACN,IAAI,CAACA,IAAI,GAAC,IAAI;QACd;MACJ,KAAK,MAAM;QACP,IAAI,CAACA,IAAI,GAAC,GAAG;QACb;MACJ,KAAK,OAAO;QACR,IAAI,CAACA,IAAI,GAAC,MAAM;QAChB;MACJ,KAAK,QAAQ;QACT,IAAI,CAACA,IAAI,GAAC,GAAG;QACb;IAAM;EAElB;EAEA,IAAIK,OAAO,GAAG;IACV,OAAO,IAAI,CAACL,IAAI;EACpB;EAEA,IAAIM,OAAO,GAAG;IACV,OAAO,IAAI,CAACP,IAAI;EACpB;EAEA,IAAIQ,cAAc,GAAG;IACjB,OAAOL,IAAI,CAACC,IAAI,CAAC,GAAG,GAAC,OAAO,CAAC;EACjC;EACA,IAAIK,YAAY,GAAI;IAChB,IAAIC,QAAQ,GAAC,EAAE;IACf,MAAMC,SAAS,GAAGR,IAAI,CAACC,IAAI,CAAC,GAAG,GAAC,OAAO,CAAC;IACxC,IAAIQ,QAAQ,GAAG,IAAI,CAACZ,IAAI;IACxB,IAAIa,gBAAgB,GAAG,CAAC;IACxB,IAAIC,SAAS,GAAC,CAAC;IACf,OAAOD,gBAAgB,GAAGF,SAAS,EAAE;MACjCE,gBAAgB,GAAC,IAAI,CAACZ,IAAI,GAACE,IAAI,CAACY,GAAG,CAACH,QAAQ,GAAC,IAAI,CAACZ,IAAI,CAAC;MACvDU,QAAQ,CAACM,IAAI,CAACH,gBAAgB,CAAC;MAC/BD,QAAQ,IAAE,EAAE;MACZE,SAAS,IAAE,EAAE;IACb;IACA,OAAOJ,QAAQ;EACnB;EAEJ,IAAIO,aAAa,GAAI;IACb,IAAIC,SAAS,GAAC,EAAE;IAChB,MAAMP,SAAS,GAAGR,IAAI,CAACC,IAAI,CAAC,GAAG,GAAC,OAAO,CAAC;IACxC,IAAIQ,QAAQ,GAAG,IAAI,CAACZ,IAAI;IACxB,IAAIa,gBAAgB,GAAG,CAAC;IACxB,IAAIC,SAAS,GAAC,CAAC;IACf,OAAOD,gBAAgB,GAAGF,SAAS,EAAE;MACjCE,gBAAgB,GAAC,IAAI,CAACZ,IAAI,GAACE,IAAI,CAACY,GAAG,CAACH,QAAQ,GAAC,IAAI,CAACZ,IAAI,CAAC;MACvDkB,SAAS,CAACF,IAAI,CAACF,SAAS,CAAC;MACzBF,QAAQ,IAAE,EAAE;MACZE,SAAS,IAAE,EAAE;IACb;IACA,OAAOI,SAAS;EACpB;EAIR,IAAIC,YAAY,GAAI;IAChB,OAAO,IAAI,CAACnB,IAAI,IAAGG,IAAI,CAACiB,GAAG,CAAC,IAAI,CAAClB,GAAG,GAAC,IAAI,CAACD,IAAI,CAAC,GAAE,CAAC,CAAC;EAEvD;AACA;AACJ,SAAQH,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}