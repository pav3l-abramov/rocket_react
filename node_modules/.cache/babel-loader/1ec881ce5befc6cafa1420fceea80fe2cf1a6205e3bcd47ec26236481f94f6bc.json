{"ast":null,"code":"import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext';\n/* eslint-disable max-len */\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideIntlService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \".concat(component, \" is invalid.\");\n  }\n  var context = component.context;\n  return context && context.intl ? context.intl : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideLocalizationService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \".concat(component, \" is invalid.\");\n  }\n  var context = component.context;\n  return context && context.localization ? context.localization : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForIntl(component) {\n  component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForLocalization(component) {\n  component.contextType = GlobalizationContext;\n}\n// tslint:enable:max-line-length","map":{"version":3,"names":["IntlService","LocalizationService","GlobalizationContext","provideIntlService","component","process","env","NODE_ENV","concat","context","intl","provideLocalizationService","localization","registerForIntl","contextType","registerForLocalization"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-react-intl/dist/es/intlUtils.js"],"sourcesContent":["import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext';\n/* eslint-disable max-len */\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideIntlService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \".concat(component, \" is invalid.\");\n    }\n    var context = component.context;\n    return context && context.intl\n        ? context.intl\n        : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideLocalizationService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \".concat(component, \" is invalid.\");\n    }\n    var context = component.context;\n    return context && context.localization\n        ? context.localization\n        : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForIntl(component) {\n    component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForLocalization(component) {\n    component.contextType = GlobalizationContext;\n}\n// tslint:enable:max-line-length\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,SAAS,EAAE;EAC1C,IAAI,CAACA,SAAS,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACrD,MAAM,qBAAqB,CAACC,MAAM,CAACJ,SAAS,EAAE,cAAc,CAAC;EACjE;EACA,IAAIK,OAAO,GAAGL,SAAS,CAACK,OAAO;EAC/B,OAAOA,OAAO,IAAIA,OAAO,CAACC,IAAI,GACxBD,OAAO,CAACC,IAAI,GACZ,IAAIV,WAAW,CAAC,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,0BAA0B,CAACP,SAAS,EAAE;EAClD,IAAI,CAACA,SAAS,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACrD,MAAM,qBAAqB,CAACC,MAAM,CAACJ,SAAS,EAAE,cAAc,CAAC;EACjE;EACA,IAAIK,OAAO,GAAGL,SAAS,CAACK,OAAO;EAC/B,OAAOA,OAAO,IAAIA,OAAO,CAACG,YAAY,GAChCH,OAAO,CAACG,YAAY,GACpB,IAAIX,mBAAmB,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,eAAe,CAACT,SAAS,EAAE;EACvCA,SAAS,CAACU,WAAW,GAAGZ,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,uBAAuB,CAACX,SAAS,EAAE;EAC/CA,SAAS,CAACU,WAAW,GAAGZ,oBAAoB;AAChD;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}