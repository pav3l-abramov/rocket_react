{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Box } from '../../core';\nimport Crosshair from '../crosshair/crosshair';\nimport Pane from '../pane';\nimport { hasValue } from '../utils';\nimport { WHITE, BLACK, X, Y, COORD_PRECISION, TOP, BOTTOM, LEFT, RIGHT, START, END } from '../../common/constants';\nimport { append, deepExtend, defined, getSpacing, getTemplate, inArray, isFunction, isString, limitValue, round, setDefaultOptions } from '../../common';\nvar PlotAreaBase = function (ChartElement) {\n  function PlotAreaBase(series, options, chartService) {\n    ChartElement.call(this, options);\n    this.initFields(series, options);\n    this.series = series;\n    this.initSeries();\n    this.charts = [];\n    this.options.legend = this.options.legend || {};\n    this.options.legend.items = [];\n    this.axes = [];\n    this.crosshairs = [];\n    this.chartService = chartService;\n    this.originalOptions = options;\n    this.createPanes();\n    this.render();\n    this.createCrosshairs();\n  }\n  if (ChartElement) PlotAreaBase.__proto__ = ChartElement;\n  PlotAreaBase.prototype = Object.create(ChartElement && ChartElement.prototype);\n  PlotAreaBase.prototype.constructor = PlotAreaBase;\n  PlotAreaBase.prototype.initFields = function initFields() {};\n  PlotAreaBase.prototype.initSeries = function initSeries() {\n    var series = this.series;\n    for (var i = 0; i < series.length; i++) {\n      series[i].index = i;\n    }\n  };\n  PlotAreaBase.prototype.createPanes = function createPanes() {\n    var this$1 = this;\n    var titleOptions = this.options.title || {};\n    var paneDefaults = this.options.paneDefaults;\n    var paneOptions = this.options.panes || [];\n    var panesLength = Math.max(paneOptions.length, 1);\n    var panes = [];\n    var defaults = deepExtend({\n      title: {\n        color: titleOptions.color\n      }\n    }, paneDefaults);\n    for (var i = 0; i < panesLength; i++) {\n      var options = deepExtend({}, defaults, paneOptions[i]);\n      if (isString(options.title)) {\n        options.title = deepExtend({\n          text: options.title\n        }, defaults.title);\n      }\n      var currentPane = new Pane(options);\n      currentPane.paneIndex = i;\n      panes.push(currentPane);\n      this$1.append(currentPane);\n    }\n    this.panes = panes;\n  };\n  PlotAreaBase.prototype.crosshairOptions = function crosshairOptions(axis) {\n    return axis.options.crosshair;\n  };\n  PlotAreaBase.prototype.createCrosshairs = function createCrosshairs(panes) {\n    var this$1 = this;\n    if (panes === void 0) panes = this.panes;\n    for (var i = 0; i < panes.length; i++) {\n      var pane = panes[i];\n      for (var j = 0; j < pane.axes.length; j++) {\n        var axis = pane.axes[j];\n        var options = this$1.crosshairOptions(axis);\n        if (options && options.visible) {\n          var currentCrosshair = new Crosshair(this$1.chartService, axis, options);\n          this$1.crosshairs.push(currentCrosshair);\n          pane.content.append(currentCrosshair);\n        }\n      }\n    }\n  };\n  PlotAreaBase.prototype.removeCrosshairs = function removeCrosshairs(pane) {\n    var crosshairs = this.crosshairs;\n    var axes = pane.axes;\n    for (var i = crosshairs.length - 1; i >= 0; i--) {\n      for (var j = 0; j < axes.length; j++) {\n        if (crosshairs[i].axis === axes[j]) {\n          crosshairs.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n  PlotAreaBase.prototype.hideCrosshairs = function hideCrosshairs() {\n    var crosshairs = this.crosshairs;\n    for (var idx = 0; idx < crosshairs.length; idx++) {\n      crosshairs[idx].hide();\n    }\n  };\n  PlotAreaBase.prototype.findPane = function findPane(name) {\n    var panes = this.panes;\n    var matchingPane;\n    for (var i = 0; i < panes.length; i++) {\n      if (panes[i].options.name === name) {\n        matchingPane = panes[i];\n        break;\n      }\n    }\n    return matchingPane || panes[0];\n  };\n  PlotAreaBase.prototype.findPointPane = function findPointPane(point) {\n    var panes = this.panes;\n    var matchingPane;\n    for (var i = 0; i < panes.length; i++) {\n      if (panes[i].box.containsPoint(point)) {\n        matchingPane = panes[i];\n        break;\n      }\n    }\n    return matchingPane;\n  };\n  PlotAreaBase.prototype.appendAxis = function appendAxis(axis) {\n    var pane = this.findPane(axis.options.pane);\n    pane.appendAxis(axis);\n    this.axes.push(axis);\n    axis.plotArea = this;\n  };\n  PlotAreaBase.prototype.removeAxis = function removeAxis(axisToRemove) {\n    var this$1 = this;\n    var filteredAxes = [];\n    for (var i = 0; i < this.axes.length; i++) {\n      var axis = this$1.axes[i];\n      if (axisToRemove !== axis) {\n        filteredAxes.push(axis);\n      } else {\n        axis.destroy();\n      }\n    }\n    this.axes = filteredAxes;\n  };\n  PlotAreaBase.prototype.appendChart = function appendChart(chart, pane) {\n    this.charts.push(chart);\n    if (pane) {\n      pane.appendChart(chart);\n    } else {\n      this.append(chart);\n    }\n  };\n  PlotAreaBase.prototype.removeChart = function removeChart(chartToRemove) {\n    var this$1 = this;\n    var filteredCharts = [];\n    for (var i = 0; i < this.charts.length; i++) {\n      var chart = this$1.charts[i];\n      if (chart !== chartToRemove) {\n        filteredCharts.push(chart);\n      } else {\n        chart.destroy();\n      }\n    }\n    this.charts = filteredCharts;\n  };\n  PlotAreaBase.prototype.addToLegend = function addToLegend(series) {\n    var count = series.length;\n    var legend = this.options.legend;\n    var labels = legend.labels || {};\n    var inactiveItems = legend.inactiveItems || {};\n    var inactiveItemsLabels = inactiveItems.labels || {};\n    var data = [];\n    for (var i = 0; i < count; i++) {\n      var currentSeries = series[i];\n      var seriesVisible = currentSeries.visible !== false;\n      if (currentSeries.visibleInLegend === false) {\n        continue;\n      }\n      var text = currentSeries.name;\n      var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);\n      if (labelTemplate) {\n        text = labelTemplate({\n          text: hasValue(text) ? text : \"\",\n          series: currentSeries\n        });\n      }\n      var defaults = currentSeries._defaults;\n      var color = currentSeries.color;\n      if (isFunction(color) && defaults) {\n        color = defaults.color;\n      }\n      var itemLabelOptions = void 0,\n        markerColor = void 0;\n      if (seriesVisible) {\n        itemLabelOptions = {};\n        markerColor = color;\n      } else {\n        itemLabelOptions = {\n          color: inactiveItemsLabels.color,\n          font: inactiveItemsLabels.font\n        };\n        markerColor = inactiveItems.markers.color;\n      }\n      if (hasValue(text) && text !== \"\") {\n        data.push({\n          text: text,\n          labels: itemLabelOptions,\n          markerColor: markerColor,\n          series: currentSeries,\n          active: seriesVisible\n        });\n      }\n    }\n    append(legend.items, data);\n  };\n  PlotAreaBase.prototype.groupAxes = function groupAxes(panes) {\n    var xAxes = [];\n    var yAxes = [];\n    for (var paneIx = 0; paneIx < panes.length; paneIx++) {\n      var paneAxes = panes[paneIx].axes;\n      for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {\n        var axis = paneAxes[axisIx];\n        if (axis.options.vertical) {\n          yAxes.push(axis);\n        } else {\n          xAxes.push(axis);\n        }\n      }\n    }\n    return {\n      x: xAxes,\n      y: yAxes,\n      any: xAxes.concat(yAxes)\n    };\n  };\n  PlotAreaBase.prototype.groupSeriesByPane = function groupSeriesByPane() {\n    var this$1 = this;\n    var series = this.series;\n    var seriesByPane = {};\n    for (var i = 0; i < series.length; i++) {\n      var currentSeries = series[i];\n      var pane = this$1.seriesPaneName(currentSeries);\n      if (seriesByPane[pane]) {\n        seriesByPane[pane].push(currentSeries);\n      } else {\n        seriesByPane[pane] = [currentSeries];\n      }\n    }\n    return seriesByPane;\n  };\n  PlotAreaBase.prototype.filterVisibleSeries = function filterVisibleSeries(series) {\n    var result = [];\n    for (var i = 0; i < series.length; i++) {\n      var currentSeries = series[i];\n      if (currentSeries.visible !== false) {\n        result.push(currentSeries);\n      }\n    }\n    return result;\n  };\n  PlotAreaBase.prototype.reflow = function reflow(targetBox) {\n    var options = this.options.plotArea;\n    var panes = this.panes;\n    var margin = getSpacing(options.margin);\n    this.box = targetBox.clone().unpad(margin);\n    this.reflowPanes();\n    this.detachLabels();\n    this.reflowAxes(panes);\n    this.reflowCharts(panes);\n  };\n  PlotAreaBase.prototype.redraw = function redraw(panes) {\n    var this$1 = this;\n    var panesArray = [].concat(panes);\n    this.initSeries();\n\n    //prevents leak during partial redraws. the cached gradients observers retain reference to the destroyed elements.\n    var root = this.getRoot();\n    if (root) {\n      root.cleanGradients();\n    }\n    for (var i = 0; i < panesArray.length; i++) {\n      this$1.removeCrosshairs(panesArray[i]);\n      panesArray[i].empty();\n    }\n    this.render(panesArray);\n    this.detachLabels();\n    this.reflowAxes(this.panes);\n    this.reflowCharts(panesArray);\n    this.createCrosshairs(panesArray);\n    for (var i$1 = 0; i$1 < panesArray.length; i$1++) {\n      panesArray[i$1].refresh();\n    }\n  };\n  PlotAreaBase.prototype.axisCrossingValues = function axisCrossingValues(axis, crossingAxes) {\n    var options = axis.options;\n    var crossingValues = [].concat(options.axisCrossingValues || options.axisCrossingValue);\n    var valuesToAdd = crossingAxes.length - crossingValues.length;\n    var defaultValue = crossingValues[0] || 0;\n    for (var i = 0; i < valuesToAdd; i++) {\n      crossingValues.push(defaultValue);\n    }\n    return crossingValues;\n  };\n  PlotAreaBase.prototype.alignAxisTo = function alignAxisTo(axis, targetAxis, crossingValue, targetCrossingValue) {\n    var slot = axis.getSlot(crossingValue, crossingValue, true);\n    var slotEdge = axis.options.reverse ? 2 : 1;\n    var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);\n    var targetEdge = targetAxis.options.reverse ? 2 : 1;\n    var axisBox = axis.box.translate(targetSlot[X + targetEdge] - slot[X + slotEdge], targetSlot[Y + targetEdge] - slot[Y + slotEdge]);\n    if (axis.pane !== targetAxis.pane) {\n      axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);\n    }\n    axis.reflow(axisBox);\n  };\n  PlotAreaBase.prototype.alignAxes = function alignAxes(xAxes, yAxes) {\n    var this$1 = this;\n    var xAnchor = xAxes[0];\n    var yAnchor = yAxes[0];\n    var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);\n    var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);\n    var leftAnchors = {};\n    var rightAnchors = {};\n    var topAnchors = {};\n    var bottomAnchors = {};\n    for (var i = 0; i < yAxes.length; i++) {\n      var axis = yAxes[i];\n      var pane = axis.pane;\n      var paneId = pane.id;\n      var visible = axis.options.visible !== false;\n\n      // Locate pane anchor, if any, and use its axisCrossingValues\n      var anchor = paneAnchor(xAxes, pane) || xAnchor;\n      var anchorCrossings = xAnchorCrossings;\n      if (anchor !== xAnchor) {\n        anchorCrossings = this$1.axisCrossingValues(anchor, yAxes);\n      }\n      this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n      if (axis.options._overlap) {\n        continue;\n      }\n      if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {\n        // Push the axis to the left the previous y-axis so they don't overlap\n        if (leftAnchors[paneId]) {\n          axis.reflow(axis.box.alignTo(leftAnchors[paneId].box, LEFT).translate(-axis.options.margin, 0));\n        }\n        if (visible) {\n          leftAnchors[paneId] = axis;\n        }\n      }\n      if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {\n        // Flip the labels on the right if we're at the right end of the pane\n        if (!axis._mirrored) {\n          axis.options.labels.mirror = !axis.options.labels.mirror;\n          axis._mirrored = true;\n        }\n        this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n        // Push the axis to the right the previous y-axis so they don't overlap\n        if (rightAnchors[paneId]) {\n          axis.reflow(axis.box.alignTo(rightAnchors[paneId].box, RIGHT).translate(axis.options.margin, 0));\n        }\n        if (visible) {\n          rightAnchors[paneId] = axis;\n        }\n      }\n      if (i !== 0 && yAnchor.pane === axis.pane) {\n        axis.alignTo(yAnchor);\n        axis.reflow(axis.box);\n      }\n    }\n    for (var i$1 = 0; i$1 < xAxes.length; i$1++) {\n      var axis$1 = xAxes[i$1];\n      var pane$1 = axis$1.pane;\n      var paneId$1 = pane$1.id;\n      var visible$1 = axis$1.options.visible !== false;\n\n      // Locate pane anchor and use its axisCrossingValues\n      var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;\n      var anchorCrossings$1 = yAnchorCrossings;\n      if (anchor$1 !== yAnchor) {\n        anchorCrossings$1 = this$1.axisCrossingValues(anchor$1, xAxes);\n      }\n      this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n      if (axis$1.options._overlap) {\n        continue;\n      }\n      if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {\n        // Flip the labels on top if we're at the top of the pane\n        if (!axis$1._mirrored) {\n          axis$1.options.labels.mirror = !axis$1.options.labels.mirror;\n          axis$1._mirrored = true;\n        }\n        this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n        // Push the axis above the previous x-axis so they don't overlap\n        if (topAnchors[paneId$1]) {\n          axis$1.reflow(axis$1.box.alignTo(topAnchors[paneId$1].box, TOP).translate(0, -axis$1.options.margin));\n        }\n        if (visible$1) {\n          topAnchors[paneId$1] = axis$1;\n        }\n      }\n      if (round(axis$1.lineBox().y2, COORD_PRECISION) === round(anchor$1.lineBox().y2, COORD_PRECISION)) {\n        // Push the axis below the previous x-axis so they don't overlap\n        if (bottomAnchors[paneId$1]) {\n          axis$1.reflow(axis$1.box.alignTo(bottomAnchors[paneId$1].box, BOTTOM).translate(0, axis$1.options.margin));\n        }\n        if (visible$1) {\n          bottomAnchors[paneId$1] = axis$1;\n        }\n      }\n      if (i$1 !== 0) {\n        axis$1.alignTo(xAnchor);\n        axis$1.reflow(axis$1.box);\n      }\n    }\n  };\n  PlotAreaBase.prototype.shrinkAxisWidth = function shrinkAxisWidth(panes) {\n    var axes = this.groupAxes(panes).any;\n    var axisBox = axisGroupBox(axes);\n    var overflowX = 0;\n    for (var i = 0; i < panes.length; i++) {\n      var currentPane = panes[i];\n      if (currentPane.axes.length > 0) {\n        overflowX = Math.max(overflowX, axisBox.width() - currentPane.contentBox.width());\n      }\n    }\n    if (overflowX !== 0) {\n      for (var i$1 = 0; i$1 < axes.length; i$1++) {\n        var currentAxis = axes[i$1];\n        if (!currentAxis.options.vertical) {\n          currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));\n        }\n      }\n    }\n  };\n  PlotAreaBase.prototype.shrinkAxisHeight = function shrinkAxisHeight(panes) {\n    var shrinked;\n    for (var i = 0; i < panes.length; i++) {\n      var currentPane = panes[i];\n      var axes = currentPane.axes;\n      var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());\n      if (overflowY !== 0) {\n        for (var j = 0; j < axes.length; j++) {\n          var currentAxis = axes[j];\n          if (currentAxis.options.vertical) {\n            currentAxis.reflow(currentAxis.box.shrink(0, overflowY));\n          }\n        }\n        shrinked = true;\n      }\n    }\n    return shrinked;\n  };\n  PlotAreaBase.prototype.fitAxes = function fitAxes(panes) {\n    var axes = this.groupAxes(panes).any;\n    var offsetX = 0;\n    for (var i = 0; i < panes.length; i++) {\n      var currentPane = panes[i];\n      var paneAxes = currentPane.axes;\n      var paneBox = currentPane.contentBox;\n      if (paneAxes.length > 0) {\n        var axisBox = axisGroupBox(paneAxes);\n        // OffsetY is calculated and applied per pane\n        var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);\n\n        // OffsetX is calculated and applied globally\n        offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);\n        for (var j = 0; j < paneAxes.length; j++) {\n          var currentAxis = paneAxes[j];\n          currentAxis.reflow(currentAxis.box.translate(0, offsetY));\n        }\n      }\n    }\n    for (var i$1 = 0; i$1 < axes.length; i$1++) {\n      var currentAxis$1 = axes[i$1];\n      currentAxis$1.reflow(currentAxis$1.box.translate(offsetX, 0));\n    }\n  };\n  PlotAreaBase.prototype.reflowAxes = function reflowAxes(panes) {\n    var this$1 = this;\n    var axes = this.groupAxes(panes);\n    for (var i = 0; i < panes.length; i++) {\n      this$1.reflowPaneAxes(panes[i]);\n    }\n    if (axes.x.length > 0 && axes.y.length > 0) {\n      this.alignAxes(axes.x, axes.y);\n      this.shrinkAxisWidth(panes);\n      this.autoRotateAxisLabels(axes);\n      this.alignAxes(axes.x, axes.y);\n      if (this.shrinkAxisWidth(panes)) {\n        this.alignAxes(axes.x, axes.y);\n      }\n      this.shrinkAxisHeight(panes);\n      this.alignAxes(axes.x, axes.y);\n      if (this.shrinkAxisHeight(panes)) {\n        this.alignAxes(axes.x, axes.y);\n      }\n      this.fitAxes(panes);\n    }\n  };\n  PlotAreaBase.prototype.autoRotateAxisLabels = function autoRotateAxisLabels(groupedAxes) {\n    var this$1 = this;\n    var ref = this;\n    var panes = ref.panes;\n    var axes = allPaneAxes(panes);\n    var rotated;\n    for (var idx = 0; idx < axes.length; idx++) {\n      var axis = axes[idx];\n      if (axis.autoRotateLabels()) {\n        rotated = true;\n      }\n    }\n    if (rotated) {\n      for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {\n        this$1.reflowPaneAxes(panes[idx$1]);\n      }\n      if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {\n        this.alignAxes(groupedAxes.x, groupedAxes.y);\n        this.shrinkAxisWidth(panes);\n      }\n    }\n  };\n  PlotAreaBase.prototype.reflowPaneAxes = function reflowPaneAxes(pane) {\n    var axes = pane.axes;\n    var length = axes.length;\n    if (length > 0) {\n      for (var i = 0; i < length; i++) {\n        axes[i].reflow(pane.contentBox);\n      }\n    }\n  };\n  PlotAreaBase.prototype.reflowCharts = function reflowCharts(panes) {\n    var charts = this.charts;\n    var count = charts.length;\n    var box = this.box;\n    for (var i = 0; i < count; i++) {\n      var chartPane = charts[i].pane;\n      if (!chartPane || inArray(chartPane, panes)) {\n        charts[i].reflow(box);\n      }\n    }\n  };\n  PlotAreaBase.prototype.reflowPanes = function reflowPanes() {\n    var ref = this;\n    var box = ref.box;\n    var panes = ref.panes;\n    var panesLength = panes.length;\n    var remainingHeight = box.height();\n    var remainingPanes = panesLength;\n    var autoHeightPanes = 0;\n    var top = box.y1;\n    for (var i = 0; i < panesLength; i++) {\n      var currentPane = panes[i];\n      var height = currentPane.options.height;\n      currentPane.options.width = box.width();\n      if (!currentPane.options.height) {\n        autoHeightPanes++;\n      } else {\n        if (height.indexOf && height.indexOf(\"%\")) {\n          var percents = parseInt(height, 10) / 100;\n          currentPane.options.height = percents * box.height();\n        }\n        currentPane.reflow(box.clone());\n        remainingHeight -= currentPane.options.height;\n      }\n    }\n    for (var i$1 = 0; i$1 < panesLength; i$1++) {\n      var currentPane$1 = panes[i$1];\n      if (!currentPane$1.options.height) {\n        currentPane$1.options.height = remainingHeight / autoHeightPanes;\n      }\n    }\n    for (var i$2 = 0; i$2 < panesLength; i$2++) {\n      var currentPane$2 = panes[i$2];\n      var paneBox = box.clone().move(box.x1, top);\n      currentPane$2.reflow(paneBox);\n      remainingPanes--;\n      top += currentPane$2.options.height;\n    }\n  };\n  PlotAreaBase.prototype.backgroundBox = function backgroundBox() {\n    var axes = this.axes;\n    var axesCount = axes.length;\n    var box;\n    for (var i = 0; i < axesCount; i++) {\n      var axisA = axes[i];\n      for (var j = 0; j < axesCount; j++) {\n        var axisB = axes[j];\n        if (axisA.options.vertical !== axisB.options.vertical) {\n          var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());\n          if (!box) {\n            box = lineBox;\n          } else {\n            box = box.wrap(lineBox);\n          }\n        }\n      }\n    }\n    return box || this.box;\n  };\n  PlotAreaBase.prototype.chartsBoxes = function chartsBoxes() {\n    var panes = this.panes;\n    var boxes = [];\n    for (var idx = 0; idx < panes.length; idx++) {\n      boxes.push(panes[idx].chartsBox());\n    }\n    return boxes;\n  };\n  PlotAreaBase.prototype.addBackgroundPaths = function addBackgroundPaths(multipath) {\n    var boxes = this.chartsBoxes();\n    for (var idx = 0; idx < boxes.length; idx++) {\n      multipath.paths.push(draw.Path.fromRect(boxes[idx].toRect()));\n    }\n  };\n  PlotAreaBase.prototype.backgroundContainsPoint = function backgroundContainsPoint(point) {\n    var boxes = this.chartsBoxes();\n    for (var idx = 0; idx < boxes.length; idx++) {\n      if (boxes[idx].containsPoint(point)) {\n        return true;\n      }\n    }\n  };\n  PlotAreaBase.prototype.createVisual = function createVisual() {\n    ChartElement.prototype.createVisual.call(this);\n    var options = this.options.plotArea;\n    var opacity = options.opacity;\n    var background = options.background;\n    var border = options.border;\n    if (border === void 0) border = {};\n    if (isTransparent(background)) {\n      background = WHITE;\n      opacity = 0;\n    }\n    var bg = this._bgVisual = new draw.MultiPath({\n      fill: {\n        color: background,\n        opacity: opacity\n      },\n      stroke: {\n        color: border.width ? border.color : \"\",\n        width: border.width,\n        dashType: border.dashType\n      },\n      zIndex: -1\n    });\n    this.addBackgroundPaths(bg);\n    this.appendVisual(bg);\n  };\n  PlotAreaBase.prototype.pointsByCategoryIndex = function pointsByCategoryIndex(categoryIndex) {\n    var charts = this.charts;\n    var result = [];\n    if (categoryIndex !== null) {\n      for (var i = 0; i < charts.length; i++) {\n        var chart = charts[i];\n        if (chart.pane.options.name === \"_navigator\") {\n          continue;\n        }\n        var points = charts[i].categoryPoints[categoryIndex];\n        if (points && points.length) {\n          for (var j = 0; j < points.length; j++) {\n            var point = points[j];\n            if (point && defined(point.value) && point.value !== null) {\n              result.push(point);\n            }\n          }\n        }\n      }\n    }\n    return result;\n  };\n  PlotAreaBase.prototype.pointsBySeriesIndex = function pointsBySeriesIndex(seriesIndex) {\n    return this.filterPoints(function (point) {\n      return point.series.index === seriesIndex;\n    });\n  };\n  PlotAreaBase.prototype.pointsBySeriesName = function pointsBySeriesName(name) {\n    return this.filterPoints(function (point) {\n      return point.series.name === name;\n    });\n  };\n  PlotAreaBase.prototype.filterPoints = function filterPoints(callback) {\n    var charts = this.charts;\n    var result = [];\n    for (var i = 0; i < charts.length; i++) {\n      var chart = charts[i];\n      var points = chart.points;\n      for (var j = 0; j < points.length; j++) {\n        var point = points[j];\n        if (point && point.visible !== false && callback(point)) {\n          result.push(point);\n        }\n      }\n    }\n    return result;\n  };\n  PlotAreaBase.prototype.findPoint = function findPoint(callback) {\n    var charts = this.charts;\n    for (var i = 0; i < charts.length; i++) {\n      var chart = charts[i];\n      var points = chart.points;\n      for (var j = 0; j < points.length; j++) {\n        var point = points[j];\n        if (point && point.visible !== false && callback(point)) {\n          return point;\n        }\n      }\n    }\n  };\n  PlotAreaBase.prototype.paneByPoint = function paneByPoint(point) {\n    var panes = this.panes;\n    for (var i = 0; i < panes.length; i++) {\n      var pane = panes[i];\n      if (pane.box.containsPoint(point)) {\n        return pane;\n      }\n    }\n  };\n  PlotAreaBase.prototype.detachLabels = function detachLabels() {\n    var axes = this.groupAxes(this.panes);\n    var xAxes = axes.x;\n    var yAxes = axes.y;\n    this.detachAxisGroupLabels(yAxes, xAxes);\n    this.detachAxisGroupLabels(xAxes, yAxes);\n  };\n  PlotAreaBase.prototype.detachAxisGroupLabels = function detachAxisGroupLabels(axes, crossingAxes) {\n    var this$1 = this;\n    var labelAxisCount = 0;\n    for (var i = 0; i < axes.length; i++) {\n      var axis = axes[i];\n      var pane = axis.pane;\n      var anchor = paneAnchor(crossingAxes, pane) || crossingAxes[0];\n      var axisIndex = i + labelAxisCount;\n      var labelAxis = this$1.createLabelAxis(axis, axisIndex, anchor);\n      if (labelAxis) {\n        labelAxisCount++;\n        var pos = pane.axes.indexOf(axis) + labelAxisCount;\n        pane.appendAxisAt(labelAxis, pos);\n      }\n    }\n  };\n  PlotAreaBase.prototype.createLabelAxis = function createLabelAxis(axis, axisIndex, anchor) {\n    var labelOptions = axis.options.labels;\n    var position = labelOptions.position;\n    var onAxis = position !== END && position !== START;\n    var visible = labelOptions.visible;\n    if (onAxis || visible === false) {\n      return null;\n    }\n    var allAxes = this.groupAxes(this.panes);\n    var crossingAxes = anchor.options.vertical ? allAxes.x : allAxes.y;\n    var anchorCrossings = this.axisCrossingValues(anchor, crossingAxes);\n    var end = position === END;\n    var range = anchor.range();\n    var edge = end ? range.max : range.min;\n    var crossingValue = limitValue(anchorCrossings[axisIndex], range.min, range.max);\n    if (crossingValue - edge === 0) {\n      return null;\n    }\n    anchorCrossings.splice(axisIndex + 1, 0, edge);\n    anchor.options.axisCrossingValues = anchorCrossings;\n    var labelAxis = axis.clone();\n    axis.clear();\n    labelAxis.options.name = undefined;\n    labelAxis.options.line.visible = false;\n    labelAxis.options.crosshair = undefined;\n    labelAxis.options.notes = undefined;\n    labelAxis.options.plotBands = undefined;\n    return labelAxis;\n  };\n  return PlotAreaBase;\n}(ChartElement);\nfunction isSingleAxis(axis) {\n  return !axis.pane.axes.some(function (a) {\n    return a.options.vertical === axis.options.vertical && a !== axis && a.options.visible !== false;\n  });\n}\nfunction axisGroupBox(axes) {\n  var length = axes.length;\n  var box;\n  for (var i = 0; i < length; i++) {\n    var axis = axes[i];\n    var visible = axis.options.visible !== false;\n    if (visible || isSingleAxis(axis)) {\n      var axisBox = visible ? axis.contentBox() : axis.lineBox();\n      if (!box) {\n        box = axisBox.clone();\n      } else {\n        box.wrap(axisBox);\n      }\n    }\n  }\n  return box || new Box();\n}\nfunction paneAnchor(axes, pane) {\n  for (var i = 0; i < axes.length; i++) {\n    var anchor = axes[i];\n    if (anchor && anchor.pane === pane) {\n      return anchor;\n    }\n  }\n}\nfunction isTransparent(color) {\n  return color === \"\" || color === null || color === \"none\" || color === \"transparent\" || !defined(color);\n}\nvar allPaneAxes = function (panes) {\n  return panes.reduce(function (acc, pane) {\n    return acc.concat(pane.axes);\n  }, []);\n};\nsetDefaultOptions(PlotAreaBase, {\n  series: [],\n  plotArea: {\n    margin: {}\n  },\n  background: \"\",\n  border: {\n    color: BLACK,\n    width: 0\n  },\n  paneDefaults: {\n    title: {}\n  },\n  legend: {\n    inactiveItems: {\n      labels: {\n        color: \"#919191\"\n      },\n      markers: {\n        color: \"#919191\"\n      }\n    }\n  }\n});\nexport default PlotAreaBase;","map":{"version":3,"names":["drawing","draw","ChartElement","Box","Crosshair","Pane","hasValue","WHITE","BLACK","X","Y","COORD_PRECISION","TOP","BOTTOM","LEFT","RIGHT","START","END","append","deepExtend","defined","getSpacing","getTemplate","inArray","isFunction","isString","limitValue","round","setDefaultOptions","PlotAreaBase","series","options","chartService","call","initFields","initSeries","charts","legend","items","axes","crosshairs","originalOptions","createPanes","render","createCrosshairs","__proto__","prototype","Object","create","constructor","i","length","index","this$1","titleOptions","title","paneDefaults","paneOptions","panes","panesLength","Math","max","defaults","color","text","currentPane","paneIndex","push","crosshairOptions","axis","crosshair","pane","j","visible","currentCrosshair","content","removeCrosshairs","splice","hideCrosshairs","idx","hide","findPane","name","matchingPane","findPointPane","point","box","containsPoint","appendAxis","plotArea","removeAxis","axisToRemove","filteredAxes","destroy","appendChart","chart","removeChart","chartToRemove","filteredCharts","addToLegend","count","labels","inactiveItems","inactiveItemsLabels","data","currentSeries","seriesVisible","visibleInLegend","labelTemplate","_defaults","itemLabelOptions","markerColor","font","markers","active","groupAxes","xAxes","yAxes","paneIx","paneAxes","axisIx","vertical","x","y","any","concat","groupSeriesByPane","seriesByPane","seriesPaneName","filterVisibleSeries","result","reflow","targetBox","margin","clone","unpad","reflowPanes","detachLabels","reflowAxes","reflowCharts","redraw","panesArray","root","getRoot","cleanGradients","empty","i$1","refresh","axisCrossingValues","crossingAxes","crossingValues","axisCrossingValue","valuesToAdd","defaultValue","alignAxisTo","targetAxis","crossingValue","targetCrossingValue","slot","getSlot","slotEdge","reverse","targetSlot","targetEdge","axisBox","translate","y1","alignAxes","xAnchor","yAnchor","xAnchorCrossings","yAnchorCrossings","leftAnchors","rightAnchors","topAnchors","bottomAnchors","paneId","id","anchor","paneAnchor","anchorCrossings","_overlap","lineBox","x1","alignTo","x2","_mirrored","mirror","axis$1","pane$1","paneId$1","visible$1","anchor$1","anchorCrossings$1","y2","shrinkAxisWidth","axisGroupBox","overflowX","width","contentBox","currentAxis","shrink","shrinkAxisHeight","shrinked","overflowY","height","fitAxes","offsetX","paneBox","offsetY","currentAxis$1","reflowPaneAxes","autoRotateAxisLabels","groupedAxes","ref","allPaneAxes","rotated","autoRotateLabels","idx$1","chartPane","remainingHeight","remainingPanes","autoHeightPanes","top","indexOf","percents","parseInt","currentPane$1","i$2","currentPane$2","move","backgroundBox","axesCount","axisA","axisB","wrap","chartsBoxes","boxes","chartsBox","addBackgroundPaths","multipath","paths","Path","fromRect","toRect","backgroundContainsPoint","createVisual","opacity","background","border","isTransparent","bg","_bgVisual","MultiPath","fill","stroke","dashType","zIndex","appendVisual","pointsByCategoryIndex","categoryIndex","points","categoryPoints","value","pointsBySeriesIndex","seriesIndex","filterPoints","pointsBySeriesName","callback","findPoint","paneByPoint","detachAxisGroupLabels","labelAxisCount","axisIndex","labelAxis","createLabelAxis","pos","appendAxisAt","labelOptions","position","onAxis","allAxes","end","range","edge","min","clear","undefined","line","notes","plotBands","isSingleAxis","some","a","reduce","acc"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/chart/plotarea/plotarea-base.js"],"sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport { ChartElement, Box } from '../../core';\nimport Crosshair from '../crosshair/crosshair';\nimport Pane from '../pane';\nimport { hasValue } from '../utils';\n\nimport { WHITE, BLACK, X, Y, COORD_PRECISION, TOP, BOTTOM, LEFT, RIGHT, START, END } from '../../common/constants';\nimport { append, deepExtend, defined, getSpacing, getTemplate, inArray, isFunction, isString, limitValue, round, setDefaultOptions } from '../../common';\n\nvar PlotAreaBase = (function (ChartElement) {\n    function PlotAreaBase(series, options, chartService) {\n        ChartElement.call(this, options);\n\n        this.initFields(series, options);\n        this.series = series;\n        this.initSeries();\n        this.charts = [];\n        this.options.legend = this.options.legend || {};\n        this.options.legend.items = [];\n        this.axes = [];\n        this.crosshairs = [];\n        this.chartService = chartService;\n        this.originalOptions = options;\n\n        this.createPanes();\n        this.render();\n        this.createCrosshairs();\n    }\n\n    if ( ChartElement ) PlotAreaBase.__proto__ = ChartElement;\n    PlotAreaBase.prototype = Object.create( ChartElement && ChartElement.prototype );\n    PlotAreaBase.prototype.constructor = PlotAreaBase;\n\n    PlotAreaBase.prototype.initFields = function initFields () { };\n\n    PlotAreaBase.prototype.initSeries = function initSeries () {\n        var series = this.series;\n\n        for (var i = 0; i < series.length; i++) {\n            series[i].index = i;\n        }\n    };\n\n    PlotAreaBase.prototype.createPanes = function createPanes () {\n        var this$1 = this;\n\n        var titleOptions = this.options.title || {};\n        var paneDefaults = this.options.paneDefaults;\n        var paneOptions = this.options.panes || [];\n        var panesLength = Math.max(paneOptions.length, 1);\n        var panes = [];\n\n        var defaults = deepExtend({\n            title: {\n                color: titleOptions.color\n            }\n        }, paneDefaults);\n\n        for (var i = 0; i < panesLength; i++) {\n            var options = deepExtend({}, defaults, paneOptions[i]);\n            if (isString(options.title)) {\n                options.title = deepExtend({ text: options.title }, defaults.title);\n            }\n\n            var currentPane = new Pane(options);\n            currentPane.paneIndex = i;\n\n            panes.push(currentPane);\n            this$1.append(currentPane);\n        }\n\n        this.panes = panes;\n    };\n\n    PlotAreaBase.prototype.crosshairOptions = function crosshairOptions (axis) {\n        return axis.options.crosshair;\n    };\n\n    PlotAreaBase.prototype.createCrosshairs = function createCrosshairs (panes) {\n        var this$1 = this;\n        if ( panes === void 0 ) panes = this.panes;\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            for (var j = 0; j < pane.axes.length; j++) {\n                var axis = pane.axes[j];\n                var options = this$1.crosshairOptions(axis);\n                if (options && options.visible) {\n                    var currentCrosshair = new Crosshair(this$1.chartService, axis, options);\n\n                    this$1.crosshairs.push(currentCrosshair);\n                    pane.content.append(currentCrosshair);\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.removeCrosshairs = function removeCrosshairs (pane) {\n        var crosshairs = this.crosshairs;\n        var axes = pane.axes;\n\n        for (var i = crosshairs.length - 1; i >= 0; i--) {\n            for (var j = 0; j < axes.length; j++) {\n                if (crosshairs[i].axis === axes[j]) {\n                    crosshairs.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.hideCrosshairs = function hideCrosshairs () {\n        var crosshairs = this.crosshairs;\n        for (var idx = 0; idx < crosshairs.length; idx++) {\n            crosshairs[idx].hide();\n        }\n    };\n\n    PlotAreaBase.prototype.findPane = function findPane (name) {\n        var panes = this.panes;\n        var matchingPane;\n\n        for (var i = 0; i < panes.length; i++) {\n            if (panes[i].options.name === name) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane || panes[0];\n    };\n\n    PlotAreaBase.prototype.findPointPane = function findPointPane (point) {\n        var panes = this.panes;\n        var matchingPane;\n\n        for (var i = 0; i < panes.length; i++) {\n            if (panes[i].box.containsPoint(point)) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane;\n    };\n\n    PlotAreaBase.prototype.appendAxis = function appendAxis (axis) {\n        var pane = this.findPane(axis.options.pane);\n\n        pane.appendAxis(axis);\n        this.axes.push(axis);\n        axis.plotArea = this;\n    };\n\n    PlotAreaBase.prototype.removeAxis = function removeAxis (axisToRemove) {\n        var this$1 = this;\n\n        var filteredAxes = [];\n\n        for (var i = 0; i < this.axes.length; i++) {\n            var axis = this$1.axes[i];\n            if (axisToRemove !== axis) {\n                filteredAxes.push(axis);\n            } else {\n                axis.destroy();\n            }\n        }\n\n        this.axes = filteredAxes;\n    };\n\n    PlotAreaBase.prototype.appendChart = function appendChart (chart, pane) {\n        this.charts.push(chart);\n        if (pane) {\n            pane.appendChart(chart);\n        } else {\n            this.append(chart);\n        }\n    };\n\n    PlotAreaBase.prototype.removeChart = function removeChart (chartToRemove) {\n        var this$1 = this;\n\n        var filteredCharts = [];\n\n        for (var i = 0; i < this.charts.length; i++) {\n            var chart = this$1.charts[i];\n            if (chart !== chartToRemove) {\n                filteredCharts.push(chart);\n            } else {\n                chart.destroy();\n            }\n        }\n\n        this.charts = filteredCharts;\n    };\n\n    PlotAreaBase.prototype.addToLegend = function addToLegend (series) {\n        var count = series.length;\n        var legend = this.options.legend;\n        var labels = legend.labels || {};\n        var inactiveItems = legend.inactiveItems || {};\n        var inactiveItemsLabels = inactiveItems.labels || {};\n        var data = [];\n\n        for (var i = 0; i < count; i++) {\n            var currentSeries = series[i];\n            var seriesVisible = currentSeries.visible !== false;\n            if (currentSeries.visibleInLegend === false) {\n                continue;\n            }\n\n            var text = currentSeries.name;\n            var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);\n            if (labelTemplate) {\n                text = labelTemplate({\n                    text: hasValue(text) ? text : \"\",\n                    series: currentSeries\n                });\n            }\n\n            var defaults = currentSeries._defaults;\n            var color = currentSeries.color;\n            if (isFunction(color) && defaults) {\n                color = defaults.color;\n            }\n\n            var itemLabelOptions = (void 0), markerColor = (void 0);\n            if (seriesVisible) {\n                itemLabelOptions = {};\n                markerColor = color;\n            } else {\n                itemLabelOptions = {\n                    color: inactiveItemsLabels.color,\n                    font: inactiveItemsLabels.font\n                };\n                markerColor = inactiveItems.markers.color;\n            }\n\n            if (hasValue(text) && text !== \"\") {\n                data.push({\n                    text: text,\n                    labels: itemLabelOptions,\n                    markerColor: markerColor,\n                    series: currentSeries,\n                    active: seriesVisible\n                });\n            }\n        }\n\n        append(legend.items, data);\n    };\n\n    PlotAreaBase.prototype.groupAxes = function groupAxes (panes) {\n        var xAxes = [];\n        var yAxes = [];\n\n        for (var paneIx = 0; paneIx < panes.length; paneIx++) {\n            var paneAxes = panes[paneIx].axes;\n            for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {\n                var axis = paneAxes[axisIx];\n                if (axis.options.vertical) {\n                    yAxes.push(axis);\n                } else {\n                    xAxes.push(axis);\n                }\n            }\n        }\n\n        return { x: xAxes, y: yAxes, any: xAxes.concat(yAxes) };\n    };\n\n    PlotAreaBase.prototype.groupSeriesByPane = function groupSeriesByPane () {\n        var this$1 = this;\n\n        var series = this.series;\n        var seriesByPane = {};\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            var pane = this$1.seriesPaneName(currentSeries);\n\n            if (seriesByPane[pane]) {\n                seriesByPane[pane].push(currentSeries);\n            } else {\n                seriesByPane[pane] = [ currentSeries ];\n            }\n        }\n\n        return seriesByPane;\n    };\n\n    PlotAreaBase.prototype.filterVisibleSeries = function filterVisibleSeries (series) {\n        var result = [];\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            if (currentSeries.visible !== false) {\n                result.push(currentSeries);\n            }\n        }\n\n        return result;\n    };\n\n    PlotAreaBase.prototype.reflow = function reflow (targetBox) {\n        var options = this.options.plotArea;\n        var panes = this.panes;\n        var margin = getSpacing(options.margin);\n\n        this.box = targetBox.clone().unpad(margin);\n        this.reflowPanes();\n\n        this.detachLabels();\n        this.reflowAxes(panes);\n        this.reflowCharts(panes);\n    };\n\n    PlotAreaBase.prototype.redraw = function redraw (panes) {\n        var this$1 = this;\n\n        var panesArray = [].concat(panes);\n        this.initSeries();\n\n        //prevents leak during partial redraws. the cached gradients observers retain reference to the destroyed elements.\n        var root = this.getRoot();\n        if (root) {\n            root.cleanGradients();\n        }\n\n        for (var i = 0; i < panesArray.length; i++) {\n            this$1.removeCrosshairs(panesArray[i]);\n            panesArray[i].empty();\n        }\n\n        this.render(panesArray);\n        this.detachLabels();\n        this.reflowAxes(this.panes);\n        this.reflowCharts(panesArray);\n\n        this.createCrosshairs(panesArray);\n\n        for (var i$1 = 0; i$1 < panesArray.length; i$1++) {\n            panesArray[i$1].refresh();\n        }\n    };\n\n    PlotAreaBase.prototype.axisCrossingValues = function axisCrossingValues (axis, crossingAxes) {\n        var options = axis.options;\n        var crossingValues = [].concat(\n            options.axisCrossingValues || options.axisCrossingValue\n        );\n        var valuesToAdd = crossingAxes.length - crossingValues.length;\n        var defaultValue = crossingValues[0] || 0;\n\n        for (var i = 0; i < valuesToAdd; i++) {\n            crossingValues.push(defaultValue);\n        }\n\n        return crossingValues;\n    };\n\n    PlotAreaBase.prototype.alignAxisTo = function alignAxisTo (axis, targetAxis, crossingValue, targetCrossingValue) {\n        var slot = axis.getSlot(crossingValue, crossingValue, true);\n        var slotEdge = axis.options.reverse ? 2 : 1;\n        var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);\n        var targetEdge = targetAxis.options.reverse ? 2 : 1;\n        var axisBox = axis.box.translate(\n            targetSlot[X + targetEdge] - slot[X + slotEdge],\n            targetSlot[Y + targetEdge] - slot[Y + slotEdge]\n        );\n\n        if (axis.pane !== targetAxis.pane) {\n            axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);\n        }\n\n        axis.reflow(axisBox);\n    };\n\n    PlotAreaBase.prototype.alignAxes = function alignAxes (xAxes, yAxes) {\n        var this$1 = this;\n\n        var xAnchor = xAxes[0];\n        var yAnchor = yAxes[0];\n        var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);\n        var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);\n        var leftAnchors = {};\n        var rightAnchors = {};\n        var topAnchors = {};\n        var bottomAnchors = {};\n\n        for (var i = 0; i < yAxes.length; i++) {\n            var axis = yAxes[i];\n            var pane = axis.pane;\n            var paneId = pane.id;\n            var visible = axis.options.visible !== false;\n\n            // Locate pane anchor, if any, and use its axisCrossingValues\n            var anchor = paneAnchor(xAxes, pane) || xAnchor;\n            var anchorCrossings = xAnchorCrossings;\n\n            if (anchor !== xAnchor) {\n                anchorCrossings = this$1.axisCrossingValues(anchor, yAxes);\n            }\n\n            this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n            if (axis.options._overlap) {\n                continue;\n            }\n\n            if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {\n                // Push the axis to the left the previous y-axis so they don't overlap\n                if (leftAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(leftAnchors[paneId].box, LEFT)\n                        .translate(-axis.options.margin, 0)\n                    );\n                }\n\n                if (visible) {\n                    leftAnchors[paneId] = axis;\n                }\n            }\n\n            if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {\n                // Flip the labels on the right if we're at the right end of the pane\n                if (!axis._mirrored) {\n                    axis.options.labels.mirror = !axis.options.labels.mirror;\n                    axis._mirrored = true;\n                }\n\n                this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n                // Push the axis to the right the previous y-axis so they don't overlap\n                if (rightAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(rightAnchors[paneId].box, RIGHT)\n                        .translate(axis.options.margin, 0)\n                    );\n                }\n\n                if (visible) {\n                    rightAnchors[paneId] = axis;\n                }\n            }\n\n            if (i !== 0 && yAnchor.pane === axis.pane) {\n                axis.alignTo(yAnchor);\n                axis.reflow(axis.box);\n            }\n        }\n\n        for (var i$1 = 0; i$1 < xAxes.length; i$1++) {\n            var axis$1 = xAxes[i$1];\n            var pane$1 = axis$1.pane;\n            var paneId$1 = pane$1.id;\n            var visible$1 = axis$1.options.visible !== false;\n\n            // Locate pane anchor and use its axisCrossingValues\n            var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;\n            var anchorCrossings$1 = yAnchorCrossings;\n            if (anchor$1 !== yAnchor) {\n                anchorCrossings$1 = this$1.axisCrossingValues(anchor$1, xAxes);\n            }\n\n            this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n            if (axis$1.options._overlap) {\n                continue;\n            }\n\n            if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {\n                // Flip the labels on top if we're at the top of the pane\n                if (!axis$1._mirrored) {\n                    axis$1.options.labels.mirror = !axis$1.options.labels.mirror;\n                    axis$1._mirrored = true;\n                }\n                this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n                // Push the axis above the previous x-axis so they don't overlap\n                if (topAnchors[paneId$1]) {\n                    axis$1.reflow(axis$1.box\n                        .alignTo(topAnchors[paneId$1].box, TOP)\n                        .translate(0, -axis$1.options.margin)\n                    );\n                }\n\n                if (visible$1) {\n                    topAnchors[paneId$1] = axis$1;\n                }\n            }\n\n            if (round(axis$1.lineBox().y2, COORD_PRECISION) === round(anchor$1.lineBox().y2, COORD_PRECISION)) {\n                // Push the axis below the previous x-axis so they don't overlap\n                if (bottomAnchors[paneId$1]) {\n                    axis$1.reflow(axis$1.box\n                        .alignTo(bottomAnchors[paneId$1].box, BOTTOM)\n                        .translate(0, axis$1.options.margin)\n                    );\n                }\n\n                if (visible$1) {\n                    bottomAnchors[paneId$1] = axis$1;\n                }\n            }\n\n            if (i$1 !== 0) {\n                axis$1.alignTo(xAnchor);\n                axis$1.reflow(axis$1.box);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.shrinkAxisWidth = function shrinkAxisWidth (panes) {\n        var axes = this.groupAxes(panes).any;\n        var axisBox = axisGroupBox(axes);\n        var overflowX = 0;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n\n            if (currentPane.axes.length > 0) {\n                overflowX = Math.max(\n                    overflowX,\n                    axisBox.width() - currentPane.contentBox.width()\n                );\n            }\n        }\n\n        if (overflowX !== 0) {\n            for (var i$1 = 0; i$1 < axes.length; i$1++) {\n                var currentAxis = axes[i$1];\n\n                if (!currentAxis.options.vertical) {\n                    currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.shrinkAxisHeight = function shrinkAxisHeight (panes) {\n        var shrinked;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            var axes = currentPane.axes;\n            var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());\n\n            if (overflowY !== 0) {\n                for (var j = 0; j < axes.length; j++) {\n                    var currentAxis = axes[j];\n\n                    if (currentAxis.options.vertical) {\n                        currentAxis.reflow(\n                            currentAxis.box.shrink(0, overflowY)\n                        );\n                    }\n                }\n                shrinked = true;\n            }\n        }\n\n        return shrinked;\n    };\n\n    PlotAreaBase.prototype.fitAxes = function fitAxes (panes) {\n        var axes = this.groupAxes(panes).any;\n        var offsetX = 0;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            var paneAxes = currentPane.axes;\n            var paneBox = currentPane.contentBox;\n\n            if (paneAxes.length > 0) {\n                var axisBox = axisGroupBox(paneAxes);\n                // OffsetY is calculated and applied per pane\n                var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);\n\n                // OffsetX is calculated and applied globally\n                offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);\n\n\n                for (var j = 0; j < paneAxes.length; j++) {\n                    var currentAxis = paneAxes[j];\n\n                    currentAxis.reflow(\n                        currentAxis.box.translate(0, offsetY)\n                    );\n                }\n            }\n        }\n\n        for (var i$1 = 0; i$1 < axes.length; i$1++) {\n            var currentAxis$1 = axes[i$1];\n\n            currentAxis$1.reflow(\n                currentAxis$1.box.translate(offsetX, 0)\n            );\n        }\n    };\n\n    PlotAreaBase.prototype.reflowAxes = function reflowAxes (panes) {\n        var this$1 = this;\n\n        var axes = this.groupAxes(panes);\n\n        for (var i = 0; i < panes.length; i++) {\n            this$1.reflowPaneAxes(panes[i]);\n        }\n\n        if (axes.x.length > 0 && axes.y.length > 0) {\n            this.alignAxes(axes.x, axes.y);\n            this.shrinkAxisWidth(panes);\n\n            this.autoRotateAxisLabels(axes);\n\n            this.alignAxes(axes.x, axes.y);\n            if (this.shrinkAxisWidth(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.shrinkAxisHeight(panes);\n            this.alignAxes(axes.x, axes.y);\n\n            if (this.shrinkAxisHeight(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.fitAxes(panes);\n        }\n    };\n\n    PlotAreaBase.prototype.autoRotateAxisLabels = function autoRotateAxisLabels (groupedAxes) {\n        var this$1 = this;\n\n        var ref = this;\n        var panes = ref.panes;\n        var axes = allPaneAxes(panes);\n        var rotated;\n\n        for (var idx = 0; idx < axes.length; idx++) {\n            var axis = axes[idx];\n            if (axis.autoRotateLabels()) {\n                rotated = true;\n            }\n        }\n\n        if (rotated) {\n            for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {\n                this$1.reflowPaneAxes(panes[idx$1]);\n            }\n\n            if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {\n                this.alignAxes(groupedAxes.x, groupedAxes.y);\n                this.shrinkAxisWidth(panes);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.reflowPaneAxes = function reflowPaneAxes (pane) {\n        var axes = pane.axes;\n        var length = axes.length;\n\n        if (length > 0) {\n            for (var i = 0; i < length; i++) {\n                axes[i].reflow(pane.contentBox);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.reflowCharts = function reflowCharts (panes) {\n        var charts = this.charts;\n        var count = charts.length;\n        var box = this.box;\n\n        for (var i = 0; i < count; i++) {\n            var chartPane = charts[i].pane;\n            if (!chartPane || inArray(chartPane, panes)) {\n                charts[i].reflow(box);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.reflowPanes = function reflowPanes () {\n        var ref = this;\n        var box = ref.box;\n        var panes = ref.panes;\n        var panesLength = panes.length;\n        var remainingHeight = box.height();\n        var remainingPanes = panesLength;\n        var autoHeightPanes = 0;\n        var top = box.y1;\n\n        for (var i = 0; i < panesLength; i++) {\n            var currentPane = panes[i];\n            var height = currentPane.options.height;\n\n            currentPane.options.width = box.width();\n\n            if (!currentPane.options.height) {\n                autoHeightPanes++;\n            } else {\n                if (height.indexOf && height.indexOf(\"%\")) {\n                    var percents = parseInt(height, 10) / 100;\n                    currentPane.options.height = percents * box.height();\n                }\n\n                currentPane.reflow(box.clone());\n\n                remainingHeight -= currentPane.options.height;\n            }\n        }\n\n        for (var i$1 = 0; i$1 < panesLength; i$1++) {\n            var currentPane$1 = panes[i$1];\n\n            if (!currentPane$1.options.height) {\n                currentPane$1.options.height = remainingHeight / autoHeightPanes;\n            }\n        }\n\n        for (var i$2 = 0; i$2 < panesLength; i$2++) {\n            var currentPane$2 = panes[i$2];\n            var paneBox = box\n                .clone()\n                .move(box.x1, top);\n\n            currentPane$2.reflow(paneBox);\n\n            remainingPanes--;\n            top += currentPane$2.options.height;\n        }\n    };\n\n    PlotAreaBase.prototype.backgroundBox = function backgroundBox () {\n        var axes = this.axes;\n        var axesCount = axes.length;\n        var box;\n\n        for (var i = 0; i < axesCount; i++) {\n            var axisA = axes[i];\n\n            for (var j = 0; j < axesCount; j++) {\n                var axisB = axes[j];\n\n                if (axisA.options.vertical !== axisB.options.vertical) {\n                    var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());\n\n                    if (!box) {\n                        box = lineBox;\n                    } else {\n                        box = box.wrap(lineBox);\n                    }\n                }\n            }\n        }\n\n        return box || this.box;\n    };\n\n    PlotAreaBase.prototype.chartsBoxes = function chartsBoxes () {\n        var panes = this.panes;\n        var boxes = [];\n\n        for (var idx = 0; idx < panes.length; idx++) {\n            boxes.push(panes[idx].chartsBox());\n        }\n\n        return boxes;\n    };\n\n    PlotAreaBase.prototype.addBackgroundPaths = function addBackgroundPaths (multipath) {\n        var boxes = this.chartsBoxes();\n        for (var idx = 0; idx < boxes.length; idx++) {\n            multipath.paths.push(draw.Path.fromRect(boxes[idx].toRect()));\n        }\n    };\n\n    PlotAreaBase.prototype.backgroundContainsPoint = function backgroundContainsPoint (point) {\n        var boxes = this.chartsBoxes();\n        for (var idx = 0; idx < boxes.length; idx++) {\n            if (boxes[idx].containsPoint(point)) {\n                return true;\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.createVisual = function createVisual () {\n        ChartElement.prototype.createVisual.call(this);\n\n        var options = this.options.plotArea;\n        var opacity = options.opacity;\n        var background = options.background;\n        var border = options.border; if ( border === void 0 ) border = {};\n        if (isTransparent(background)) {\n            background = WHITE;\n            opacity = 0;\n        }\n\n        var bg = this._bgVisual = new draw.MultiPath({\n            fill: {\n                color: background,\n                opacity: opacity\n            },\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            },\n            zIndex: -1\n        });\n\n        this.addBackgroundPaths(bg);\n\n        this.appendVisual(bg);\n    };\n\n    PlotAreaBase.prototype.pointsByCategoryIndex = function pointsByCategoryIndex (categoryIndex) {\n        var charts = this.charts;\n        var result = [];\n\n        if (categoryIndex !== null) {\n            for (var i = 0; i < charts.length; i++) {\n                var chart = charts[i];\n                if (chart.pane.options.name === \"_navigator\") {\n                    continue;\n                }\n\n                var points = charts[i].categoryPoints[categoryIndex];\n                if (points && points.length) {\n                    for (var j = 0; j < points.length; j++) {\n                        var point = points[j];\n                        if (point && defined(point.value) && point.value !== null) {\n                            result.push(point);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    PlotAreaBase.prototype.pointsBySeriesIndex = function pointsBySeriesIndex (seriesIndex) {\n        return this.filterPoints(function(point) {\n            return point.series.index === seriesIndex;\n        });\n    };\n\n    PlotAreaBase.prototype.pointsBySeriesName = function pointsBySeriesName (name) {\n        return this.filterPoints(function(point) {\n            return point.series.name === name;\n        });\n    };\n\n    PlotAreaBase.prototype.filterPoints = function filterPoints (callback) {\n        var charts = this.charts;\n        var result = [];\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n            var points = chart.points;\n            for (var j = 0; j < points.length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && callback(point)) {\n                    result.push(point);\n                }\n            }\n        }\n\n        return result;\n    };\n\n    PlotAreaBase.prototype.findPoint = function findPoint (callback) {\n        var charts = this.charts;\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n            var points = chart.points;\n            for (var j = 0; j < points.length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && callback(point)) {\n                    return point;\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.paneByPoint = function paneByPoint (point) {\n        var panes = this.panes;\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            if (pane.box.containsPoint(point)) {\n                return pane;\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.detachLabels = function detachLabels () {\n        var axes = this.groupAxes(this.panes);\n        var xAxes = axes.x;\n        var yAxes = axes.y;\n\n        this.detachAxisGroupLabels(yAxes, xAxes);\n        this.detachAxisGroupLabels(xAxes, yAxes);\n    };\n\n    PlotAreaBase.prototype.detachAxisGroupLabels = function detachAxisGroupLabels (axes, crossingAxes) {\n        var this$1 = this;\n\n        var labelAxisCount = 0;\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i];\n            var pane = axis.pane;\n            var anchor = paneAnchor(crossingAxes, pane) || crossingAxes[0];\n            var axisIndex = i + labelAxisCount;\n            var labelAxis = this$1.createLabelAxis(axis, axisIndex, anchor);\n\n            if (labelAxis) {\n                labelAxisCount++;\n\n                var pos = pane.axes.indexOf(axis) + labelAxisCount;\n                pane.appendAxisAt(labelAxis, pos);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.createLabelAxis = function createLabelAxis (axis, axisIndex, anchor) {\n        var labelOptions = axis.options.labels;\n        var position = labelOptions.position;\n        var onAxis = position !== END && position !== START;\n        var visible = labelOptions.visible;\n\n        if (onAxis || visible === false) {\n            return null;\n        }\n\n        var allAxes = this.groupAxes(this.panes);\n        var crossingAxes = anchor.options.vertical ? allAxes.x : allAxes.y;\n        var anchorCrossings = this.axisCrossingValues(anchor, crossingAxes);\n        var end = position === END;\n        var range = anchor.range();\n        var edge = end ? range.max : range.min;\n        var crossingValue = limitValue(anchorCrossings[axisIndex], range.min, range.max);\n\n        if (crossingValue - edge === 0) {\n            return null;\n        }\n\n        anchorCrossings.splice(axisIndex + 1, 0, edge);\n        anchor.options.axisCrossingValues = anchorCrossings;\n\n        var labelAxis = axis.clone();\n        axis.clear();\n\n        labelAxis.options.name = undefined;\n        labelAxis.options.line.visible = false;\n\n        labelAxis.options.crosshair = undefined;\n        labelAxis.options.notes = undefined;\n        labelAxis.options.plotBands = undefined;\n\n        return labelAxis;\n    };\n\n    return PlotAreaBase;\n}(ChartElement));\n\nfunction isSingleAxis(axis) {\n    return !axis.pane.axes.some(function (a) { return a.options.vertical === axis.options.vertical && a !== axis && a.options.visible !== false; }\n    );\n}\n\nfunction axisGroupBox(axes) {\n    var length = axes.length;\n    var box;\n\n    for (var i = 0; i < length; i++) {\n        var axis = axes[i];\n        var visible = axis.options.visible !== false;\n        if (visible || isSingleAxis(axis)) {\n            var axisBox = visible ? axis.contentBox() : axis.lineBox();\n\n            if (!box) {\n                box = axisBox.clone();\n            } else {\n                box.wrap(axisBox);\n            }\n        }\n    }\n\n    return box || new Box();\n}\n\nfunction paneAnchor(axes, pane) {\n    for (var i = 0; i < axes.length; i++) {\n        var anchor = axes[i];\n        if (anchor && anchor.pane === pane) {\n            return anchor;\n        }\n    }\n}\n\nfunction isTransparent(color) {\n    return color === \"\" || color === null || color === \"none\" || color === \"transparent\" || !defined(color);\n}\n\nvar allPaneAxes = function (panes) { return panes.reduce(function (acc, pane) { return acc.concat(pane.axes); }, []); };\n\nsetDefaultOptions(PlotAreaBase, {\n    series: [],\n    plotArea: {\n        margin: {}\n    },\n    background: \"\",\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    paneDefaults: {\n        title: {}\n    },\n    legend: {\n        inactiveItems: {\n            labels: {\n                color: \"#919191\"\n            },\n            markers: {\n                color: \"#919191\"\n            }\n        }\n    }\n});\n\nexport default PlotAreaBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}