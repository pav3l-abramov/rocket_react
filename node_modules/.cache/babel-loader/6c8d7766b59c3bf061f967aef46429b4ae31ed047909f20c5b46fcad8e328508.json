{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport var AlphaNumericQRDataMode = function (QRDataMode) {\n  function AlphaNumericQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n  if (QRDataMode) AlphaNumericQRDataMode.__proto__ = QRDataMode;\n  AlphaNumericQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  AlphaNumericQRDataMode.prototype.constructor = AlphaNumericQRDataMode;\n  AlphaNumericQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      characters: {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n        \"G\": 16,\n        \"H\": 17,\n        \"I\": 18,\n        \"J\": 19,\n        \"K\": 20,\n        \"L\": 21,\n        \"M\": 22,\n        \"N\": 23,\n        \"O\": 24,\n        \"P\": 25,\n        \"Q\": 26,\n        \"R\": 27,\n        \"S\": 28,\n        \"T\": 29,\n        \"U\": 30,\n        \"V\": 31,\n        \"W\": 32,\n        \"X\": 33,\n        \"Y\": 34,\n        \"Z\": 35,\n        \" \": 36,\n        \"$\": 37,\n        \"%\": 38,\n        \"*\": 39,\n        \"+\": 40,\n        \"-\": 41,\n        \".\": 42,\n        \"/\": 43,\n        \":\": 44\n      },\n      bitsInCharacterCount: [9, 11, 13],\n      modeIndicator: \"0010\"\n    });\n  };\n  AlphaNumericQRDataMode.prototype.getValue = function getValue(character) {\n    return this.characters[character];\n  };\n  AlphaNumericQRDataMode.prototype.encode = function encode(str, version) {\n    var this$1 = this;\n    var parts = splitInto(str, 2),\n      result = this.getModeCountString(str.length, version),\n      value;\n    var i;\n    for (i = 0; i < parts.length - 1; i++) {\n      value = 45 * this$1.getValue(parts[i].charAt(0)) + this$1.getValue(parts[i].charAt(1));\n      result += toBitsString(value, 11);\n    }\n    value = parts[i].length === 2 ? 45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) : this.getValue(parts[i].charAt(0));\n    return result + toBitsString(value, 1 + 5 * parts[i].length);\n  };\n  AlphaNumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n  };\n  return AlphaNumericQRDataMode;\n}(QRDataMode);","map":{"version":3,"names":["QRDataMode","extend","toBitsString","splitInto","AlphaNumericQRDataMode","apply","arguments","__proto__","prototype","Object","create","constructor","initProperties","call","characters","bitsInCharacterCount","modeIndicator","getValue","character","encode","str","version","this$1","parts","result","getModeCountString","length","value","i","charAt","getStringBitsLength","inputLength","getBitsCharacterCount","Math","floor"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/data-modes/alpha-numeric-data-mode.js"],"sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString,\n    splitInto\n} from '../../utils';\n\nexport var AlphaNumericQRDataMode = (function (QRDataMode) {\n    function AlphaNumericQRDataMode () {\n        QRDataMode.apply(this, arguments);\n    }\n\n    if ( QRDataMode ) AlphaNumericQRDataMode.__proto__ = QRDataMode;\n    AlphaNumericQRDataMode.prototype = Object.create( QRDataMode && QRDataMode.prototype );\n    AlphaNumericQRDataMode.prototype.constructor = AlphaNumericQRDataMode;\n\n    AlphaNumericQRDataMode.prototype.initProperties = function initProperties () {\n        QRDataMode.prototype.initProperties.call(this);\n\n        extend(this, {\n            characters: {\n                \"0\": 0,\n                \"1\": 1,\n                \"2\": 2,\n                \"3\": 3,\n                \"4\": 4,\n                \"5\": 5,\n                \"6\": 6,\n                \"7\": 7,\n                \"8\": 8,\n                \"9\": 9,\n                \"A\": 10,\n                \"B\": 11,\n                \"C\": 12,\n                \"D\": 13,\n                \"E\": 14,\n                \"F\": 15,\n                \"G\": 16,\n                \"H\": 17,\n                \"I\": 18,\n                \"J\": 19,\n                \"K\": 20,\n                \"L\": 21,\n                \"M\": 22,\n                \"N\": 23,\n                \"O\": 24,\n                \"P\": 25,\n                \"Q\": 26,\n                \"R\": 27,\n                \"S\": 28,\n                \"T\": 29,\n                \"U\": 30,\n                \"V\": 31,\n                \"W\": 32,\n                \"X\": 33,\n                \"Y\": 34,\n                \"Z\": 35,\n                \" \": 36,\n                \"$\": 37,\n                \"%\": 38,\n                \"*\": 39,\n                \"+\": 40,\n                \"-\": 41,\n                \".\": 42,\n                \"/\": 43,\n                \":\": 44\n            },\n            bitsInCharacterCount: [9, 11, 13],\n            modeIndicator: \"0010\"\n        });\n    };\n\n    AlphaNumericQRDataMode.prototype.getValue = function getValue (character) {\n        return this.characters[character];\n    };\n\n    AlphaNumericQRDataMode.prototype.encode = function encode (str, version) {\n        var this$1 = this;\n\n        var\n            parts = splitInto(str, 2),\n            result = this.getModeCountString(str.length, version),\n            value;\n        var i;\n\n        for (i = 0; i < parts.length - 1; i++) {\n            value = 45 * this$1.getValue(parts[i].charAt(0)) + this$1.getValue(parts[i].charAt(1));\n            result += toBitsString(value, 11);\n        }\n\n        value = parts[i].length === 2 ?\n            45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) :\n            this.getValue(parts[i].charAt(0));\n\n        return result + toBitsString(value, 1 + 5 * parts[i].length);\n    };\n\n    AlphaNumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength (inputLength, version) {\n        return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n    };\n\n    return AlphaNumericQRDataMode;\n}(QRDataMode));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}