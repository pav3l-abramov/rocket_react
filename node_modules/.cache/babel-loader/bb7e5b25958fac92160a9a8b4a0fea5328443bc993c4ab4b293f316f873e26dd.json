{"ast":null,"code":"import { Class } from '../../../common';\nimport { EncodingResult } from '../encoding-result';\nimport { DataModeInstances } from '../data-modes/data-mode-instances';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nimport { getVersion } from '../encoding';\nvar BYTE = \"byte\";\nexport var Utf8Encoder = function (Class) {\n  function Utf8Encoder() {\n    Class.call(this);\n    this.initProperties();\n    this.mode = DataModeInstances[this.encodingMode];\n  }\n  if (Class) Utf8Encoder.__proto__ = Class;\n  Utf8Encoder.prototype = Object.create(Class && Class.prototype);\n  Utf8Encoder.prototype.constructor = Utf8Encoder;\n  Utf8Encoder.prototype.initProperties = function initProperties() {\n    extend(this, {\n      encodingMode: BYTE,\n      utfBOM: \"111011111011101110111111\",\n      initialModeCountStringLength: 20,\n      ranges: [128, 2048, 65536, 2097152, 67108864]\n    });\n  };\n  Utf8Encoder.prototype.getEncodingResult = function getEncodingResult(inputString, errorCorrectionLevel) {\n    var data = this.encode(inputString),\n      dataCodewordsCount = this.getDataCodewordsCount(data),\n      version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n      dataString = this.mode.getModeCountString(data.length / 8, version) + data;\n    return new EncodingResult(dataString, version);\n  };\n  Utf8Encoder.prototype.getDataCodewordsCount = function getDataCodewordsCount(data) {\n    var dataLength = data.length,\n      dataCodewordsCount = Math.ceil((this.initialModeCountStringLength + dataLength) / 8);\n    return dataCodewordsCount;\n  };\n  Utf8Encoder.prototype.encode = function encode(str) {\n    var this$1 = this;\n    var result = this.utfBOM;\n    for (var i = 0; i < str.length; i++) {\n      result += this$1.encodeCharacter(str.charCodeAt(i));\n    }\n    return result;\n  };\n  Utf8Encoder.prototype.encodeCharacter = function encodeCharacter(code) {\n    var bytesCount = this.getBytesCount(code),\n      bc = bytesCount - 1,\n      result = \"\";\n    if (bytesCount === 1) {\n      result = toBitsString(code, 8);\n    } else {\n      var significantOnes = 8 - bytesCount;\n      for (var i = 0; i < bc; i++) {\n        result = toBitsString(code >> i * 6 & 63 | 128, 8) + result;\n      }\n      result = (code >> bc * 6 | 255 >> significantOnes << significantOnes).toString(2) + result;\n    }\n    return result;\n  };\n  Utf8Encoder.prototype.getBytesCount = function getBytesCount(code) {\n    var ranges = this.ranges;\n    for (var i = 0; i < ranges.length; i++) {\n      if (code < ranges[i]) {\n        return i + 1;\n      }\n    }\n  };\n  return Utf8Encoder;\n}(Class);","map":{"version":3,"names":["Class","EncodingResult","DataModeInstances","extend","toBitsString","getVersion","BYTE","Utf8Encoder","call","initProperties","mode","encodingMode","__proto__","prototype","Object","create","constructor","utfBOM","initialModeCountStringLength","ranges","getEncodingResult","inputString","errorCorrectionLevel","data","encode","dataCodewordsCount","getDataCodewordsCount","version","dataString","getModeCountString","length","dataLength","Math","ceil","str","this$1","result","i","encodeCharacter","charCodeAt","code","bytesCount","getBytesCount","bc","significantOnes","toString"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/encoders/utf8-encoder.js"],"sourcesContent":["import { Class } from '../../../common';\nimport { EncodingResult } from '../encoding-result';\nimport { DataModeInstances } from '../data-modes/data-mode-instances';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nimport { getVersion } from '../encoding';\n\nvar BYTE = \"byte\";\n\nexport var Utf8Encoder = (function (Class) {\n    function Utf8Encoder() {\n        Class.call(this);\n\n        this.initProperties();\n\n        this.mode = DataModeInstances[this.encodingMode];\n    }\n\n    if ( Class ) Utf8Encoder.__proto__ = Class;\n    Utf8Encoder.prototype = Object.create( Class && Class.prototype );\n    Utf8Encoder.prototype.constructor = Utf8Encoder;\n\n    Utf8Encoder.prototype.initProperties = function initProperties () {\n        extend(this, {\n            encodingMode: BYTE,\n            utfBOM: \"111011111011101110111111\",\n            initialModeCountStringLength: 20,\n            ranges: [128, 2048, 65536, 2097152, 67108864]\n        });\n    };\n\n    Utf8Encoder.prototype.getEncodingResult = function getEncodingResult (inputString, errorCorrectionLevel) {\n        var data = this.encode(inputString),\n            dataCodewordsCount = this.getDataCodewordsCount(data),\n            version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n            dataString = this.mode.getModeCountString(data.length / 8, version) + data;\n\n        return new EncodingResult(dataString, version);\n    };\n\n    Utf8Encoder.prototype.getDataCodewordsCount = function getDataCodewordsCount (data) {\n        var dataLength = data.length,\n            dataCodewordsCount = Math.ceil((this.initialModeCountStringLength + dataLength) / 8);\n\n        return dataCodewordsCount;\n    };\n\n    Utf8Encoder.prototype.encode = function encode (str) {\n        var this$1 = this;\n\n        var result = this.utfBOM;\n\n        for (var i = 0; i < str.length; i++) {\n            result += this$1.encodeCharacter(str.charCodeAt(i));\n        }\n\n        return result;\n    };\n\n    Utf8Encoder.prototype.encodeCharacter = function encodeCharacter (code) {\n        var bytesCount = this.getBytesCount(code),\n            bc = bytesCount - 1,\n            result = \"\";\n\n        if (bytesCount === 1) {\n            result = toBitsString(code, 8);\n        } else {\n            var significantOnes = 8 - bytesCount;\n\n            for (var i = 0; i < bc; i++) {\n                result = toBitsString(code >> (i * 6) & 63 | 128, 8) + result;\n            }\n\n            result = ((code >> bc * 6) | ((255 >> significantOnes) << significantOnes)).toString(2) + result;\n        }\n\n        return result;\n    };\n\n    Utf8Encoder.prototype.getBytesCount = function getBytesCount (code) {\n        var ranges = this.ranges;\n\n        for (var i = 0; i < ranges.length; i++) {\n            if (code < ranges[i]) {\n                return i + 1;\n            }\n        }\n    };\n\n    return Utf8Encoder;\n}(Class));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}