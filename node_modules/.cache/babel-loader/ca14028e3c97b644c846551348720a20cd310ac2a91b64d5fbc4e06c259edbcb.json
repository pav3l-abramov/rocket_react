{"ast":null,"code":"import { drawing } from '@progress/kendo-drawing';\nimport { interpolateValue, setDefaultOptions } from '../../common';\nimport { X, Y } from '../../common/constants';\nimport { BAR_POINTER, LINEAR_SPEED, LINEAR } from '../constants';\nvar BarLinearPointerAnimation = function (superclass) {\n  function BarLinearPointerAnimation() {\n    superclass.apply(this, arguments);\n  }\n  if (superclass) BarLinearPointerAnimation.__proto__ = superclass;\n  BarLinearPointerAnimation.prototype = Object.create(superclass && superclass.prototype);\n  BarLinearPointerAnimation.prototype.constructor = BarLinearPointerAnimation;\n  BarLinearPointerAnimation.prototype.setup = function setup() {\n    var options = this.options;\n    var axis = this.axis = options.vertical ? Y : X;\n    var to = this.to = options.newPoints[0][axis];\n    var from = this.from = options.oldPoints[0][axis];\n    if (options.duration !== 0) {\n      options.duration = Math.max(Math.abs(to - from) / options.speed * 1000, 1);\n    }\n    this._set(from);\n  };\n  BarLinearPointerAnimation.prototype.step = function step(pos) {\n    var value = interpolateValue(this.from, this.to, pos);\n    this._set(value);\n  };\n  BarLinearPointerAnimation.prototype._set = function _set(value) {\n    var setter = \"set\" + this.axis.toUpperCase();\n    var points = this.options.newPoints;\n    points[0][setter](value);\n    points[1][setter](value);\n  };\n  return BarLinearPointerAnimation;\n}(drawing.Animation);\nsetDefaultOptions(BarLinearPointerAnimation, {\n  easing: LINEAR,\n  speed: LINEAR_SPEED\n});\ndrawing.AnimationFactory.current.register(BAR_POINTER, BarLinearPointerAnimation);\nexport default BarLinearPointerAnimation;","map":{"version":3,"names":["drawing","interpolateValue","setDefaultOptions","X","Y","BAR_POINTER","LINEAR_SPEED","LINEAR","BarLinearPointerAnimation","superclass","apply","arguments","__proto__","prototype","Object","create","constructor","setup","options","axis","vertical","to","newPoints","from","oldPoints","duration","Math","max","abs","speed","_set","step","pos","value","setter","toUpperCase","points","Animation","easing","AnimationFactory","current","register"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-charts/dist/es/gauges/linear/bar-linear-pointer-animation.js"],"sourcesContent":["import { drawing } from '@progress/kendo-drawing';\nimport { interpolateValue, setDefaultOptions } from '../../common';\nimport { X, Y } from '../../common/constants';\nimport { BAR_POINTER, LINEAR_SPEED, LINEAR } from '../constants';\n\nvar BarLinearPointerAnimation = (function (superclass) {\n    function BarLinearPointerAnimation () {\n        superclass.apply(this, arguments);\n    }\n\n    if ( superclass ) BarLinearPointerAnimation.__proto__ = superclass;\n    BarLinearPointerAnimation.prototype = Object.create( superclass && superclass.prototype );\n    BarLinearPointerAnimation.prototype.constructor = BarLinearPointerAnimation;\n\n    BarLinearPointerAnimation.prototype.setup = function setup () {\n        var options = this.options;\n        var axis = this.axis = options.vertical ? Y : X;\n        var to = this.to = options.newPoints[0][axis];\n        var from = this.from = options.oldPoints[0][axis];\n\n        if (options.duration !== 0) {\n            options.duration = Math.max((Math.abs(to - from) / options.speed) * 1000, 1);\n        }\n\n        this._set(from);\n    };\n\n    BarLinearPointerAnimation.prototype.step = function step (pos) {\n        var value = interpolateValue(this.from, this.to, pos);\n        this._set(value);\n    };\n\n    BarLinearPointerAnimation.prototype._set = function _set (value) {\n        var setter = \"set\" + this.axis.toUpperCase();\n        var points = this.options.newPoints;\n\n        points[0][setter](value);\n        points[1][setter](value);\n    };\n\n    return BarLinearPointerAnimation;\n}(drawing.Animation));\n\nsetDefaultOptions(BarLinearPointerAnimation, {\n    easing: LINEAR,\n    speed: LINEAR_SPEED\n});\n\ndrawing.AnimationFactory.current.register(BAR_POINTER, BarLinearPointerAnimation);\n\nexport default BarLinearPointerAnimation;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAyB;AACjD,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,cAAc;AAClE,SAASC,CAAC,EAAEC,CAAC,QAAQ,wBAAwB;AAC7C,SAASC,WAAW,EAAEC,YAAY,EAAEC,MAAM,QAAQ,cAAc;AAEhE,IAAIC,yBAAyB,GAAI,UAAUC,UAAU,EAAE;EACnD,SAASD,yBAAyB,GAAI;IAClCC,UAAU,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EACrC;EAEA,IAAKF,UAAU,EAAGD,yBAAyB,CAACI,SAAS,GAAGH,UAAU;EAClED,yBAAyB,CAACK,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAEN,UAAU,IAAIA,UAAU,CAACI,SAAS,CAAE;EACzFL,yBAAyB,CAACK,SAAS,CAACG,WAAW,GAAGR,yBAAyB;EAE3EA,yBAAyB,CAACK,SAAS,CAACI,KAAK,GAAG,SAASA,KAAK,GAAI;IAC1D,IAAIC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC1B,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI,GAAGD,OAAO,CAACE,QAAQ,GAAGhB,CAAC,GAAGD,CAAC;IAC/C,IAAIkB,EAAE,GAAG,IAAI,CAACA,EAAE,GAAGH,OAAO,CAACI,SAAS,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC;IAC7C,IAAII,IAAI,GAAG,IAAI,CAACA,IAAI,GAAGL,OAAO,CAACM,SAAS,CAAC,CAAC,CAAC,CAACL,IAAI,CAAC;IAEjD,IAAID,OAAO,CAACO,QAAQ,KAAK,CAAC,EAAE;MACxBP,OAAO,CAACO,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAED,IAAI,CAACE,GAAG,CAACP,EAAE,GAAGE,IAAI,CAAC,GAAGL,OAAO,CAACW,KAAK,GAAI,IAAI,EAAE,CAAC,CAAC;IAChF;IAEA,IAAI,CAACC,IAAI,CAACP,IAAI,CAAC;EACnB,CAAC;EAEDf,yBAAyB,CAACK,SAAS,CAACkB,IAAI,GAAG,SAASA,IAAI,CAAEC,GAAG,EAAE;IAC3D,IAAIC,KAAK,GAAGhC,gBAAgB,CAAC,IAAI,CAACsB,IAAI,EAAE,IAAI,CAACF,EAAE,EAAEW,GAAG,CAAC;IACrD,IAAI,CAACF,IAAI,CAACG,KAAK,CAAC;EACpB,CAAC;EAEDzB,yBAAyB,CAACK,SAAS,CAACiB,IAAI,GAAG,SAASA,IAAI,CAAEG,KAAK,EAAE;IAC7D,IAAIC,MAAM,GAAG,KAAK,GAAG,IAAI,CAACf,IAAI,CAACgB,WAAW,EAAE;IAC5C,IAAIC,MAAM,GAAG,IAAI,CAAClB,OAAO,CAACI,SAAS;IAEnCc,MAAM,CAAC,CAAC,CAAC,CAACF,MAAM,CAAC,CAACD,KAAK,CAAC;IACxBG,MAAM,CAAC,CAAC,CAAC,CAACF,MAAM,CAAC,CAACD,KAAK,CAAC;EAC5B,CAAC;EAED,OAAOzB,yBAAyB;AACpC,CAAC,CAACR,OAAO,CAACqC,SAAS,CAAE;AAErBnC,iBAAiB,CAACM,yBAAyB,EAAE;EACzC8B,MAAM,EAAE/B,MAAM;EACdsB,KAAK,EAAEvB;AACX,CAAC,CAAC;AAEFN,OAAO,CAACuC,gBAAgB,CAACC,OAAO,CAACC,QAAQ,CAACpC,WAAW,EAAEG,yBAAyB,CAAC;AAEjF,eAAeA,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}