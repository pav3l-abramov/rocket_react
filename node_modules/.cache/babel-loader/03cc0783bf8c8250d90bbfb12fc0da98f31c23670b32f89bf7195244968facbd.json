{"ast":null,"code":"import Node from './node';\nimport { defined, isTransparent } from '../util';\nimport { DASH_ARRAYS, SOLID, BUTT } from '../core/constants';\nimport { NONE, POINT_DIGITS } from './constants';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nvar ATTRIBUTE_MAP = {\n  \"fill.opacity\": \"fill-opacity\",\n  \"stroke.color\": \"stroke\",\n  \"stroke.width\": \"stroke-width\",\n  \"stroke.opacity\": \"stroke-opacity\"\n};\nvar PathNode = function (Node) {\n  function PathNode() {\n    Node.apply(this, arguments);\n  }\n  if (Node) PathNode.__proto__ = Node;\n  PathNode.prototype = Object.create(Node && Node.prototype);\n  PathNode.prototype.constructor = PathNode;\n  PathNode.prototype.geometryChange = function geometryChange() {\n    this.attr(\"d\", this.renderData());\n    this.invalidate();\n  };\n  PathNode.prototype.optionsChange = function optionsChange(e) {\n    switch (e.field) {\n      case \"fill\":\n        if (e.value) {\n          this.allAttr(this.mapFill(e.value));\n        } else {\n          this.removeAttr(\"fill\");\n        }\n        break;\n      case \"fill.color\":\n        this.allAttr(this.mapFill({\n          color: e.value\n        }));\n        break;\n      case \"stroke\":\n        if (e.value) {\n          this.allAttr(this.mapStroke(e.value));\n        } else {\n          this.removeAttr(\"stroke\");\n        }\n        break;\n      case \"transform\":\n        this.transformChange(e.value);\n        break;\n      default:\n        var name = ATTRIBUTE_MAP[e.field];\n        if (name) {\n          this.attr(name, e.value);\n        }\n        break;\n    }\n    Node.prototype.optionsChange.call(this, e);\n  };\n  PathNode.prototype.content = function content() {\n    if (this.element) {\n      this.element.textContent = this.srcElement.content();\n    }\n  };\n  PathNode.prototype.renderData = function renderData() {\n    return this.srcElement.toString(POINT_DIGITS) || undefined;\n  };\n  PathNode.prototype.mapStroke = function mapStroke(stroke) {\n    var attrs = [];\n    if (stroke && !isTransparent(stroke.color)) {\n      attrs.push([\"stroke\", stroke.color]);\n      attrs.push([\"stroke-width\", stroke.width]);\n      attrs.push([\"stroke-linecap\", this.renderLinecap(stroke)]);\n      attrs.push([\"stroke-linejoin\", stroke.lineJoin]);\n      if (defined(stroke.opacity)) {\n        attrs.push([\"stroke-opacity\", stroke.opacity]);\n      }\n      if (defined(stroke.dashType)) {\n        attrs.push([\"stroke-dasharray\", this.renderDashType(stroke)]);\n      }\n    } else {\n      attrs.push([\"stroke\", NONE]);\n    }\n    return attrs;\n  };\n  PathNode.prototype.renderStroke = function renderStroke() {\n    return renderAllAttr(this.mapStroke(this.srcElement.options.stroke));\n  };\n  PathNode.prototype.renderDashType = function renderDashType(stroke) {\n    var dashType = stroke.dashType;\n    var width = stroke.width;\n    if (width === void 0) width = 1;\n    if (dashType && dashType !== SOLID) {\n      var dashArray = DASH_ARRAYS[dashType.toLowerCase()];\n      var result = [];\n      for (var i = 0; i < dashArray.length; i++) {\n        result.push(dashArray[i] * width);\n      }\n      return result.join(\" \");\n    }\n  };\n  PathNode.prototype.renderLinecap = function renderLinecap(stroke) {\n    var dashType = stroke.dashType;\n    var lineCap = stroke.lineCap;\n    return dashType && dashType !== \"solid\" ? BUTT : lineCap;\n  };\n  PathNode.prototype.mapFill = function mapFill(fill) {\n    var attrs = [];\n    if (!(fill && fill.nodeType === \"Gradient\")) {\n      if (fill && !isTransparent(fill.color)) {\n        attrs.push([\"fill\", fill.color]);\n        if (defined(fill.opacity)) {\n          attrs.push([\"fill-opacity\", fill.opacity]);\n        }\n      } else {\n        attrs.push([\"fill\", NONE]);\n      }\n    }\n    return attrs;\n  };\n  PathNode.prototype.renderFill = function renderFill() {\n    return renderAllAttr(this.mapFill(this.srcElement.options.fill));\n  };\n  PathNode.prototype.template = function template() {\n    return \"<path \" + this.renderId() + \" \" + this.renderStyle() + \" \" + this.renderOpacity() + \" \" + renderAttr('d', this.renderData()) + \"\" + this.renderStroke() + this.renderFill() + this.renderDefinitions() + this.renderTransform() + \"></path>\";\n  };\n  return PathNode;\n}(Node);\nexport default PathNode;","map":{"version":3,"names":["Node","defined","isTransparent","DASH_ARRAYS","SOLID","BUTT","NONE","POINT_DIGITS","renderAllAttr","renderAttr","ATTRIBUTE_MAP","PathNode","apply","arguments","__proto__","prototype","Object","create","constructor","geometryChange","attr","renderData","invalidate","optionsChange","e","field","value","allAttr","mapFill","removeAttr","color","mapStroke","transformChange","name","call","content","element","textContent","srcElement","toString","undefined","stroke","attrs","push","width","renderLinecap","lineJoin","opacity","dashType","renderDashType","renderStroke","options","dashArray","toLowerCase","result","i","length","join","lineCap","fill","nodeType","renderFill","template","renderId","renderStyle","renderOpacity","renderDefinitions","renderTransform"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-drawing/dist/es/svg/path-node.js"],"sourcesContent":["import Node from './node';\nimport { defined, isTransparent } from '../util';\nimport { DASH_ARRAYS, SOLID, BUTT } from '../core/constants';\nimport { NONE, POINT_DIGITS } from './constants';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\n\nvar ATTRIBUTE_MAP = {\n    \"fill.opacity\": \"fill-opacity\",\n    \"stroke.color\": \"stroke\",\n    \"stroke.width\": \"stroke-width\",\n    \"stroke.opacity\": \"stroke-opacity\"\n};\n\nvar PathNode = (function (Node) {\n    function PathNode () {\n        Node.apply(this, arguments);\n    }\n\n    if ( Node ) PathNode.__proto__ = Node;\n    PathNode.prototype = Object.create( Node && Node.prototype );\n    PathNode.prototype.constructor = PathNode;\n\n    PathNode.prototype.geometryChange = function geometryChange () {\n        this.attr(\"d\", this.renderData());\n        this.invalidate();\n    };\n\n    PathNode.prototype.optionsChange = function optionsChange (e) {\n        switch (e.field) {\n            case \"fill\":\n                if (e.value) {\n                    this.allAttr(this.mapFill(e.value));\n                } else {\n                    this.removeAttr(\"fill\");\n                }\n                break;\n\n            case \"fill.color\":\n                this.allAttr(this.mapFill({ color: e.value }));\n                break;\n\n            case \"stroke\":\n                if (e.value) {\n                    this.allAttr(this.mapStroke(e.value));\n                } else {\n                    this.removeAttr(\"stroke\");\n                }\n                break;\n\n            case \"transform\":\n                this.transformChange(e.value);\n                break;\n\n            default:\n                var name = ATTRIBUTE_MAP[e.field];\n                if (name) {\n                    this.attr(name, e.value);\n                }\n                break;\n        }\n\n        Node.prototype.optionsChange.call(this, e);\n    };\n\n    PathNode.prototype.content = function content () {\n        if (this.element) {\n            this.element.textContent = this.srcElement.content();\n        }\n    };\n\n    PathNode.prototype.renderData = function renderData () {\n        return this.srcElement.toString(POINT_DIGITS) || undefined;\n    };\n\n    PathNode.prototype.mapStroke = function mapStroke (stroke) {\n        var attrs = [];\n\n        if (stroke && !isTransparent(stroke.color)) {\n            attrs.push([ \"stroke\", stroke.color ]);\n            attrs.push([ \"stroke-width\", stroke.width ]);\n            attrs.push([ \"stroke-linecap\", this.renderLinecap(stroke) ]);\n            attrs.push([ \"stroke-linejoin\", stroke.lineJoin ]);\n\n            if (defined(stroke.opacity)) {\n                attrs.push([ \"stroke-opacity\", stroke.opacity ]);\n            }\n\n            if (defined(stroke.dashType)) {\n                attrs.push([ \"stroke-dasharray\", this.renderDashType(stroke) ]);\n            }\n        } else {\n            attrs.push([ \"stroke\", NONE ]);\n        }\n\n        return attrs;\n    };\n\n    PathNode.prototype.renderStroke = function renderStroke () {\n        return renderAllAttr(\n            this.mapStroke(this.srcElement.options.stroke)\n        );\n    };\n\n    PathNode.prototype.renderDashType = function renderDashType (stroke) {\n        var dashType = stroke.dashType;\n        var width = stroke.width; if ( width === void 0 ) width = 1;\n\n        if (dashType && dashType !== SOLID) {\n            var dashArray = DASH_ARRAYS[dashType.toLowerCase()];\n            var result = [];\n\n            for (var i = 0; i < dashArray.length; i++) {\n                result.push(dashArray[i] * width);\n            }\n\n            return result.join(\" \");\n        }\n    };\n\n    PathNode.prototype.renderLinecap = function renderLinecap (stroke) {\n        var dashType = stroke.dashType;\n        var lineCap = stroke.lineCap;\n\n        return (dashType && dashType !== \"solid\") ? BUTT : lineCap;\n    };\n\n    PathNode.prototype.mapFill = function mapFill (fill) {\n        var attrs = [];\n        if (!(fill && fill.nodeType === \"Gradient\")) {\n            if (fill && !isTransparent(fill.color)) {\n                attrs.push([ \"fill\", fill.color ]);\n\n                if (defined(fill.opacity)) {\n                    attrs.push([ \"fill-opacity\", fill.opacity ]);\n                }\n            } else {\n                attrs.push([ \"fill\", NONE ]);\n            }\n        }\n\n        return attrs;\n    };\n\n    PathNode.prototype.renderFill = function renderFill () {\n        return renderAllAttr(\n            this.mapFill(this.srcElement.options.fill)\n        );\n    };\n\n    PathNode.prototype.template = function template () {\n        return \"<path \" + (this.renderId()) + \" \" + (this.renderStyle()) + \" \" + (this.renderOpacity()) + \" \" + (renderAttr('d', this.renderData())) +\n                    \"\" + (this.renderStroke()) + (this.renderFill()) + (this.renderDefinitions()) + (this.renderTransform()) + \"></path>\";\n    };\n\n    return PathNode;\n}(Node));\n\nexport default PathNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,SAASC,OAAO,EAAEC,aAAa,QAAQ,SAAS;AAChD,SAASC,WAAW,EAAEC,KAAK,EAAEC,IAAI,QAAQ,mBAAmB;AAC5D,SAASC,IAAI,EAAEC,YAAY,QAAQ,aAAa;AAChD,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,UAAU,MAAM,0BAA0B;AAEjD,IAAIC,aAAa,GAAG;EAChB,cAAc,EAAE,cAAc;EAC9B,cAAc,EAAE,QAAQ;EACxB,cAAc,EAAE,cAAc;EAC9B,gBAAgB,EAAE;AACtB,CAAC;AAED,IAAIC,QAAQ,GAAI,UAAUX,IAAI,EAAE;EAC5B,SAASW,QAAQ,GAAI;IACjBX,IAAI,CAACY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC/B;EAEA,IAAKb,IAAI,EAAGW,QAAQ,CAACG,SAAS,GAAGd,IAAI;EACrCW,QAAQ,CAACI,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAEjB,IAAI,IAAIA,IAAI,CAACe,SAAS,CAAE;EAC5DJ,QAAQ,CAACI,SAAS,CAACG,WAAW,GAAGP,QAAQ;EAEzCA,QAAQ,CAACI,SAAS,CAACI,cAAc,GAAG,SAASA,cAAc,GAAI;IAC3D,IAAI,CAACC,IAAI,CAAC,GAAG,EAAE,IAAI,CAACC,UAAU,EAAE,CAAC;IACjC,IAAI,CAACC,UAAU,EAAE;EACrB,CAAC;EAEDX,QAAQ,CAACI,SAAS,CAACQ,aAAa,GAAG,SAASA,aAAa,CAAEC,CAAC,EAAE;IAC1D,QAAQA,CAAC,CAACC,KAAK;MACX,KAAK,MAAM;QACP,IAAID,CAAC,CAACE,KAAK,EAAE;UACT,IAAI,CAACC,OAAO,CAAC,IAAI,CAACC,OAAO,CAACJ,CAAC,CAACE,KAAK,CAAC,CAAC;QACvC,CAAC,MAAM;UACH,IAAI,CAACG,UAAU,CAAC,MAAM,CAAC;QAC3B;QACA;MAEJ,KAAK,YAAY;QACb,IAAI,CAACF,OAAO,CAAC,IAAI,CAACC,OAAO,CAAC;UAAEE,KAAK,EAAEN,CAAC,CAACE;QAAM,CAAC,CAAC,CAAC;QAC9C;MAEJ,KAAK,QAAQ;QACT,IAAIF,CAAC,CAACE,KAAK,EAAE;UACT,IAAI,CAACC,OAAO,CAAC,IAAI,CAACI,SAAS,CAACP,CAAC,CAACE,KAAK,CAAC,CAAC;QACzC,CAAC,MAAM;UACH,IAAI,CAACG,UAAU,CAAC,QAAQ,CAAC;QAC7B;QACA;MAEJ,KAAK,WAAW;QACZ,IAAI,CAACG,eAAe,CAACR,CAAC,CAACE,KAAK,CAAC;QAC7B;MAEJ;QACI,IAAIO,IAAI,GAAGvB,aAAa,CAACc,CAAC,CAACC,KAAK,CAAC;QACjC,IAAIQ,IAAI,EAAE;UACN,IAAI,CAACb,IAAI,CAACa,IAAI,EAAET,CAAC,CAACE,KAAK,CAAC;QAC5B;QACA;IAAM;IAGd1B,IAAI,CAACe,SAAS,CAACQ,aAAa,CAACW,IAAI,CAAC,IAAI,EAAEV,CAAC,CAAC;EAC9C,CAAC;EAEDb,QAAQ,CAACI,SAAS,CAACoB,OAAO,GAAG,SAASA,OAAO,GAAI;IAC7C,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACC,WAAW,GAAG,IAAI,CAACC,UAAU,CAACH,OAAO,EAAE;IACxD;EACJ,CAAC;EAEDxB,QAAQ,CAACI,SAAS,CAACM,UAAU,GAAG,SAASA,UAAU,GAAI;IACnD,OAAO,IAAI,CAACiB,UAAU,CAACC,QAAQ,CAAChC,YAAY,CAAC,IAAIiC,SAAS;EAC9D,CAAC;EAED7B,QAAQ,CAACI,SAAS,CAACgB,SAAS,GAAG,SAASA,SAAS,CAAEU,MAAM,EAAE;IACvD,IAAIC,KAAK,GAAG,EAAE;IAEd,IAAID,MAAM,IAAI,CAACvC,aAAa,CAACuC,MAAM,CAACX,KAAK,CAAC,EAAE;MACxCY,KAAK,CAACC,IAAI,CAAC,CAAE,QAAQ,EAAEF,MAAM,CAACX,KAAK,CAAE,CAAC;MACtCY,KAAK,CAACC,IAAI,CAAC,CAAE,cAAc,EAAEF,MAAM,CAACG,KAAK,CAAE,CAAC;MAC5CF,KAAK,CAACC,IAAI,CAAC,CAAE,gBAAgB,EAAE,IAAI,CAACE,aAAa,CAACJ,MAAM,CAAC,CAAE,CAAC;MAC5DC,KAAK,CAACC,IAAI,CAAC,CAAE,iBAAiB,EAAEF,MAAM,CAACK,QAAQ,CAAE,CAAC;MAElD,IAAI7C,OAAO,CAACwC,MAAM,CAACM,OAAO,CAAC,EAAE;QACzBL,KAAK,CAACC,IAAI,CAAC,CAAE,gBAAgB,EAAEF,MAAM,CAACM,OAAO,CAAE,CAAC;MACpD;MAEA,IAAI9C,OAAO,CAACwC,MAAM,CAACO,QAAQ,CAAC,EAAE;QAC1BN,KAAK,CAACC,IAAI,CAAC,CAAE,kBAAkB,EAAE,IAAI,CAACM,cAAc,CAACR,MAAM,CAAC,CAAE,CAAC;MACnE;IACJ,CAAC,MAAM;MACHC,KAAK,CAACC,IAAI,CAAC,CAAE,QAAQ,EAAErC,IAAI,CAAE,CAAC;IAClC;IAEA,OAAOoC,KAAK;EAChB,CAAC;EAED/B,QAAQ,CAACI,SAAS,CAACmC,YAAY,GAAG,SAASA,YAAY,GAAI;IACvD,OAAO1C,aAAa,CAChB,IAAI,CAACuB,SAAS,CAAC,IAAI,CAACO,UAAU,CAACa,OAAO,CAACV,MAAM,CAAC,CACjD;EACL,CAAC;EAED9B,QAAQ,CAACI,SAAS,CAACkC,cAAc,GAAG,SAASA,cAAc,CAAER,MAAM,EAAE;IACjE,IAAIO,QAAQ,GAAGP,MAAM,CAACO,QAAQ;IAC9B,IAAIJ,KAAK,GAAGH,MAAM,CAACG,KAAK;IAAE,IAAKA,KAAK,KAAK,KAAK,CAAC,EAAGA,KAAK,GAAG,CAAC;IAE3D,IAAII,QAAQ,IAAIA,QAAQ,KAAK5C,KAAK,EAAE;MAChC,IAAIgD,SAAS,GAAGjD,WAAW,CAAC6C,QAAQ,CAACK,WAAW,EAAE,CAAC;MACnD,IAAIC,MAAM,GAAG,EAAE;MAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACvCD,MAAM,CAACX,IAAI,CAACS,SAAS,CAACG,CAAC,CAAC,GAAGX,KAAK,CAAC;MACrC;MAEA,OAAOU,MAAM,CAACG,IAAI,CAAC,GAAG,CAAC;IAC3B;EACJ,CAAC;EAED9C,QAAQ,CAACI,SAAS,CAAC8B,aAAa,GAAG,SAASA,aAAa,CAAEJ,MAAM,EAAE;IAC/D,IAAIO,QAAQ,GAAGP,MAAM,CAACO,QAAQ;IAC9B,IAAIU,OAAO,GAAGjB,MAAM,CAACiB,OAAO;IAE5B,OAAQV,QAAQ,IAAIA,QAAQ,KAAK,OAAO,GAAI3C,IAAI,GAAGqD,OAAO;EAC9D,CAAC;EAED/C,QAAQ,CAACI,SAAS,CAACa,OAAO,GAAG,SAASA,OAAO,CAAE+B,IAAI,EAAE;IACjD,IAAIjB,KAAK,GAAG,EAAE;IACd,IAAI,EAAEiB,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAK,UAAU,CAAC,EAAE;MACzC,IAAID,IAAI,IAAI,CAACzD,aAAa,CAACyD,IAAI,CAAC7B,KAAK,CAAC,EAAE;QACpCY,KAAK,CAACC,IAAI,CAAC,CAAE,MAAM,EAAEgB,IAAI,CAAC7B,KAAK,CAAE,CAAC;QAElC,IAAI7B,OAAO,CAAC0D,IAAI,CAACZ,OAAO,CAAC,EAAE;UACvBL,KAAK,CAACC,IAAI,CAAC,CAAE,cAAc,EAAEgB,IAAI,CAACZ,OAAO,CAAE,CAAC;QAChD;MACJ,CAAC,MAAM;QACHL,KAAK,CAACC,IAAI,CAAC,CAAE,MAAM,EAAErC,IAAI,CAAE,CAAC;MAChC;IACJ;IAEA,OAAOoC,KAAK;EAChB,CAAC;EAED/B,QAAQ,CAACI,SAAS,CAAC8C,UAAU,GAAG,SAASA,UAAU,GAAI;IACnD,OAAOrD,aAAa,CAChB,IAAI,CAACoB,OAAO,CAAC,IAAI,CAACU,UAAU,CAACa,OAAO,CAACQ,IAAI,CAAC,CAC7C;EACL,CAAC;EAEDhD,QAAQ,CAACI,SAAS,CAAC+C,QAAQ,GAAG,SAASA,QAAQ,GAAI;IAC/C,OAAO,QAAQ,GAAI,IAAI,CAACC,QAAQ,EAAG,GAAG,GAAG,GAAI,IAAI,CAACC,WAAW,EAAG,GAAG,GAAG,GAAI,IAAI,CAACC,aAAa,EAAG,GAAG,GAAG,GAAIxD,UAAU,CAAC,GAAG,EAAE,IAAI,CAACY,UAAU,EAAE,CAAE,GAChI,EAAE,GAAI,IAAI,CAAC6B,YAAY,EAAG,GAAI,IAAI,CAACW,UAAU,EAAG,GAAI,IAAI,CAACK,iBAAiB,EAAG,GAAI,IAAI,CAACC,eAAe,EAAG,GAAG,UAAU;EACrI,CAAC;EAED,OAAOxD,QAAQ;AACnB,CAAC,CAACX,IAAI,CAAE;AAER,eAAeW,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}