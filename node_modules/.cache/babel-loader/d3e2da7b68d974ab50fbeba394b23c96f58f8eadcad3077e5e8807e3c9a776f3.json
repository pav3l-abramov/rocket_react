{"ast":null,"code":"import { messages } from './messages';\n/**\n * A service which provides localization methods.\n */\nvar LocalizationService = /** @class */function () {\n  function LocalizationService(language) {\n    this.language = language;\n    if (language === '' && process.env.NODE_ENV !== 'production') {\n      throw 'Language should not be an empty string';\n    }\n  }\n  /* eslint-disable max-len */\n  /**\n   * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n   *\n   * @param key - The key which identifies the string for the current language.\n   * @param defaultValue - The default value which will be returned when no string\n   * for the current language is available under the key.\n   * @return - The string for the current language.\n   */\n  // tslint:enable:max-line-length\n  LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n    if (this.language && messages[this.language] && messages[this.language].hasOwnProperty(key)) {\n      return messages[this.language][key];\n    } else {\n      return defaultValue;\n    }\n  };\n  return LocalizationService;\n}();\nexport { LocalizationService };","map":{"version":3,"names":["messages","LocalizationService","language","process","env","NODE_ENV","prototype","toLanguageString","key","defaultValue","hasOwnProperty"],"sources":["C:/Users/Павел/Desktop/react humster/my-app/node_modules/@progress/kendo-react-intl/dist/es/Localization/LocalizationService.js"],"sourcesContent":["import { messages } from './messages';\n/**\n * A service which provides localization methods.\n */\nvar LocalizationService = /** @class */ (function () {\n    function LocalizationService(language) {\n        this.language = language;\n        if (language === '' && process.env.NODE_ENV !== 'production') {\n            throw 'Language should not be an empty string';\n        }\n    }\n    /* eslint-disable max-len */\n    /**\n     * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n     *\n     * @param key - The key which identifies the string for the current language.\n     * @param defaultValue - The default value which will be returned when no string\n     * for the current language is available under the key.\n     * @return - The string for the current language.\n     */\n    // tslint:enable:max-line-length\n    LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n        if (this.language &&\n            messages[this.language] &&\n            messages[this.language].hasOwnProperty(key)) {\n            return messages[this.language][key];\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    return LocalizationService;\n}());\nexport { LocalizationService };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmB,CAACC,QAAQ,EAAE;IACnC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAIA,QAAQ,KAAK,EAAE,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MAC1D,MAAM,wCAAwC;IAClD;EACJ;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACAJ,mBAAmB,CAACK,SAAS,CAACC,gBAAgB,GAAG,UAAUC,GAAG,EAAEC,YAAY,EAAE;IAC1E,IAAI,IAAI,CAACP,QAAQ,IACbF,QAAQ,CAAC,IAAI,CAACE,QAAQ,CAAC,IACvBF,QAAQ,CAAC,IAAI,CAACE,QAAQ,CAAC,CAACQ,cAAc,CAACF,GAAG,CAAC,EAAE;MAC7C,OAAOR,QAAQ,CAAC,IAAI,CAACE,QAAQ,CAAC,CAACM,GAAG,CAAC;IACvC,CAAC,MACI;MACD,OAAOC,YAAY;IACvB;EACJ,CAAC;EACD,OAAOR,mBAAmB;AAC9B,CAAC,EAAG;AACJ,SAASA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}